/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.05.2023 08:54:09

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#define EI_CLASSIFIER_ALLOCATION_STATIC 1

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 10064;
#else
constexpr int kTensorArenaSize = 9040;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 1703, -1555, 1680, 1538, -252, -28593, -30968, -4593, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 4.6767687308602035e-05, 4.5290820708032697e-05, 4.7470661229453981e-05, 5.5500589951407164e-05, 3.0860595870763063e-05, 2.1289253709255718e-05, 2.5412426111870445e-05, 2.9254892069729976e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1091, -265, -4261, -823, -350, 727, -86, 440, -595, 703, -121, -1628, -4028, -888, -255, 202, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00021435998496599495, 0.00018670711142476648, 0.00018472188094165176, 0.00012041439913446084, 0.00035606283927336335, 0.00027822196716442704, 0.00014134751108940691, 0.00028773074154742062, 0.00017641583690419793, 0.00029301026370376348, 0.00025139632634818554, 0.00019444887584540993, 0.00012980136671103537, 0.00029454473406076431, 0.0002975009847432375, 0.0001874583977041766, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[4] = { 1626, -1142, -1961, 1850, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0003221932565793395, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*400] = {
  11, -11, 5, 34, 9, 31, 14, 60, 14, 25, -13, 1, 17, -25, -3, -7, -55, -16, -13, 21, -33, 31, 6, 37, 18, 3, -23, -15, -2, -54, -7, -25, -25, 3, 17, 13, 6, 6, -1, -4, 11, -12, -41, 8, 3, -33, 6, -7, -33, -10, -16, 8, 15, 12, -9, 9, 27, 7, -25, -4, 5, -30, 0, 3, -35, 14, -11, 5, -5, 9, 6, 1, 25, 10, -44, -26, -3, -59, 19, 0, -30, 11, 10, -1, -8, -3, 5, -13, 27, 2, -33, -55, -3, -72, 1, -14, -33, -8, 4, -18, -19, 5, 9, -14, 14, 6, -55, -34, 3, -84, 15, -1, -28, -10, 2, 6, 2, -11, -9, -14, 28, 3, -39, -13, -3, -57, 11, -7, -43, 1, -11, 0, -36, -6, -4, 14, 28, -14, -32, -1, 1, -71, 11, -4, -81, 2, 6, 6, 5, 2, -15, -7, 3, 7, -82, -26, -1, -45, 2, -20, -60, -3, 0, -5, -3, 11, -12, 2, 2, 11, -77, -23, 8, -11, 6, -3, -31, 1, 8, -2, -16, 7, 4, 9, 13, 3, -33, -15, -3, -16, -6, -2, -36, 10, -8, 9, -11, 2, 4, -5, 18, -6, -101, -29, 2, -127, 10, -30, -88, 22, -21, -25, -13, -4, -5, 5, 25, -13, -91, 13, -8, -84, 13, 8, -79, 2, -13, 4, -13, 1, 1, 11, 27, 3, -87, -14, 0, -96, 11, -2, -60, 17, -11, 6, -27, -1, -2, -6, 12, -10, -48, -16, -6, -48, 17, -15, -34, 23, -10, 8, 2, 8, -13, 7, 29, 9, -29, -21, 1, -37, 9, 10, -31, -1, -31, -6, 3, 7, 1, 8, 26, 4, -1, -27, 17, -44, 40, 3, -46, 4, -11, 0, 2, 4, -9, 7, 23, -24, -50, -11, -2, -25, 24, -15, -35, 19, -6, 0, -18, 6, -10, -10, 29, 13, -75, -9, -6, -35, 14, -16, -17, -8, 14, -1, -18, -1, -1, -8, 7, 7, -75, -18, -2, -19, 26, -9, -13, -1, 4, 6, -4, 15, 1, 2, 31, -9, -20, -27, -14, -82, 2, 6, -37, 10, -31, 1, -51, 17, 4, 5, 23, 0, -12, -21, 0, -38, 13, -16, -18, -11, -14, 44, -26, 32, 3, 44, 8, 7, -17, -35, 2, -52, 8, -32, -15, 8, 18, 22, 13, 30, 14, 28, 15, 8, 4, 7, 12, 30, 50, 5,
  3, -14, -8, -10, 9, -3, -11, 7, 2, -7, 13, 1, -14, 7, -9, 23, 11, -15, -12, 2, 2, -10, -7, -11, -3, -34, 10, 3, -1, 15, -26, 31, 8, -18, -18, 12, 29, 28, 1, 1, 8, -2, 8, 7, -1, 6, -24, 17, 10, -19, 0, -14, 9, -8, -17, -9, -6, -30, 1, 11, -4, 15, -15, 8, 11, -11, -11, 3, -35, -4, -8, -2, -6, -30, 11, 10, 24, 18, -22, -2, 8, -11, 4, 7, -22, 2, -1, -1, -2, -8, 5, 13, 0, 12, -14, 8, 5, 7, 15, -2, -12, -11, -14, -26, -3, -5, 5, 13, -8, 10, -26, -19, 8, 6, -38, 3, -34, -1, 1, -9, 1, 12, 1, 7, -18, 14, -35, 0, 10, 4, -25, 12, -40, -7, 16, -10, -3, 17, 4, 17, -2, 11, -20, -32, 12, 16, -9, 8, -38, 13, 5, -11, 5, 13, 5, 13, -14, 16, -5, -14, 11, 20, -24, 21, -59, -22, 13, -4, 10, 23, 14, 18, -34, 20, -23, -23, 15, 12, -30, 17, -80, -13, 10, -6, -4, 8, -3, 13, 4, 8, -22, -61, 3, 30, -26, -7, -65, -15, 6, 4, -2, 22, 7, 13, -30, 10, -33, -51, 11, 3, 1, 0, -55, -11, 14, -14, 5, 29, 7, 13, 3, 12, -49, -33, 10, 1, -11, 11, -21, -4, 16, -3, -6, 20, 9, 7, -14, 5, -30, -47, 11, 5, 9, 2, -7, -32, 23, 2, -8, 17, 7, 5, 0, 9, -13, -13, 9, 17, 7, 18, -25, -57, 18, -4, 9, 18, 8, 18, -4, 4, -7, -34, 3, 5, -6, 17, -32, -5, 19, -13, 0, 13, -1, 10, -30, 11, -24, -20, 7, 3, 5, 1, -68, -27, 4, -10, -4, 12, 16, 2, 2, 21, -42, -28, 9, 25, -10, -3, -23, -28, 7, -1, -23, 13, 9, 11, -43, 14, -1, -24, 4, 17, 17, 1, -64, -7, 19, 8, -30, 0, 20, 2, -32, 3, -13, -36, 1, 0, 5, -12, -52, -15, 25, 4, -15, 26, 5, -8, -6, 6, 10, -9, 22, 3, 18, -20, -22, -13, 23, 5, -22, 6, 2, -1, -29, 13, -23, 1, 3, 6, 1, -21, -34, 7, 4, -15, -5, 4, 20, 23, -3, 15, -16, 21, 2, 17, 30, 6, -23, 12, -3, -16, 1, 13, -2, 26, -17, -8, -13, -3,
  -5, 8, -18, -19, -35, -15, 3, -52, -4, 11, 7, -1, -32, 8, 11, -19, 19, 20, -32, -48, -5, -29, 2, -1, 5, 38, 12, 5, -12, 18, 10, -8, 4, -10, -54, -20, -58, -35, 11, -11, -6, 24, 8, -2, -48, 8, 3, -5, 9, 19, -12, -8, -82, -27, 14, -8, -3, 23, 9, 5, -1, 11, 6, -7, 9, 0, -5, -28, 28, 3, 1, 7, -7, 14, 12, 15, -27, 10, -16, -7, 9, -19, -67, -26, 10, -31, -19, 4, -3, 5, 8, 10, -42, 7, -9, 14, 2, -18, -57, -11, 21, -7, 4, 33, 10, 8, 5, 15, -20, 13, -14, 25, 7, -1, -3, -16, 26, -2, 14, 13, 1, 19, 8, 10, 2, 3, -10, 7, 7, -18, -4, -23, 25, 4, -10, 1, 13, -14, 4, 6, -22, 11, -25, 16, 8, -46, -33, -6, 27, -6, -12, 20, -1, -26, 9, 13, -13, 5, 1, 14, 11, -24, -16, -27, 24, -9, -8, -12, 9, -27, 9, 14, -17, 9, -15, 10, 4, -22, -21, -29, 25, -7, -24, -4, -11, 0, 10, 9, -17, 6, -20, 29, 6, -37, 0, -7, 27, 19, -4, 8, 11, -15, 4, 14, 6, 8, -8, 32, 7, -61, -3, 11, 21, -7, 1, -9, -16, -23, 5, 10, -3, 5, -16, 12, 7, -34, -2, -15, 10, -15, -16, -5, 2, -9, 13, 8, -32, 8, -31, 21, 8, -19, -25, -6, 14, 3, -17, 2, -11, -5, 7, -4, -19, 6, -31, 14, 0, -69, 11, -5, 12, 18, -25, 6, -27, -24, 5, 3, -7, 8, -61, 15, 5, -46, 17, -23, 19, 9, -12, 2, 1, 2, 4, 16, -24, 12, -39, 12, 10, -24, 11, -20, 18, 4, 9, 4, -10, 30, 14, 12, -10, 13, -58, 24, 13, -30, 17, 2, 17, -4, 15, 7, -11, -18, 17, 4, 1, 8, -40, 12, -8, -13, -19, -12, 24, 2, -12, 9, -8, -31, 2, 8, -1, 3, -27, 27, 5, -31, -23, -6, 29, -9, 15, -2, -21, -14, 2, 25, -6, 12, -29, 6, -5, -1, -14, -7, 32, -5, -17, -8, -14, 2, 3, 32, 30, 18, -57, 8, -6, -3, 28, -12, 32, -25, -6, -14, -8, -5, -3, 5, -4, -3, -11, 6, 23, -36, -15, -23, 5, -26, 4, 3, -21, -5, 7, -2, -34, -11, -51, 8,
  -24, 7, 8, -21, 3, -28, -17, -47, -17, -24, -27, -6, -7, 3, 1, 3, -8, 5, 24, -3, 29, -8, -13, -22, -16, -1, -31, -4, 5, -26, 4, 4, -5, 4, 13, -5, 6, -14, -9, 2, -17, -4, -19, -11, 8, -13, 1, -5, -1, 16, 18, 9, 20, 3, 1, 4, -18, -4, -19, -24, 3, -18, -4, -2, -15, 3, 12, 9, 9, -2, 7, -9, -10, 13, -14, -32, 8, -13, 5, 4, -2, 15, 19, 14, -2, 16, 3, 10, -4, 6, -22, -20, 19, -2, 13, -2, 7, 5, 8, 21, 12, 7, 0, 9, -18, -5, -6, -35, 8, -28, 5, -12, -10, 14, 29, 2, 6, 8, -7, 16, -31, -19, -5, -39, 13, -11, 14, 0, 1, 15, 31, 9, 18, 0, -1, 1, -33, 0, -7, -30, 5, -16, 13, 5, 4, 17, 16, -4, -11, 2, 10, 4, -10, -6, -8, -25, 11, -9, 2, 3, 4, 0, 26, 8, -1, 6, 11, 3, -30, -9, -7, -44, 16, -16, 11, 0, 5, 1, 15, 8, 14, 15, 2, 4, 2, -14, -1, -28, 11, -10, 21, 9, 3, -7, 27, 0, 9, 0, 3, 2, -7, 2, 2, -35, 6, -8, 19, 9, -1, 11, 8, 12, 1, 13, 0, 8, -8, 4, -5, -22, 9, -8, 17, 0, 0, 9, 23, 1, 2, 13, 10, 7, -14, -5, 0, -14, 21, 0, 20, 3, 4, -9, 10, -1, 0, 8, 0, 3, -4, -6, -2, -7, 8, 0, 16, -2, 10, 11, -6, -5, -7, 9, 6, 2, -11, -11, -3, -19, 12, -17, 30, 3, 12, 14, 7, 4, 1, -5, -8, -1, -31, -22, -14, -21, 12, -9, 3, 1, 4, 14, 12, 3, 18, -1, 7, 1, 2, -22, -7, -16, 19, -31, 35, 0, 1, -17, -1, -6, 0, 11, 1, -8, 4, 5, -2, -48, 15, -28, 10, 11, 1, 1, -8, 10, 19, -3, 2, -3, 21, 5, 1, -29, 21, 3, -6, -1, 6, 11, 2, 7, 3, -4, -22, -11, 2, -7, -7, -33, 19, 27, 1, -11, -2, -13, 21, 15, 11, -8, -8, -10, -2, 6, -15, -56, -7, -4, 23, -1, 6, 4, -10, -30, 11, -27, 1, -31, -5, -12, -16, -12, 0, 17, 1, -6, -24, 1, -19, -8, -6, -27, -8, -16, -8, -26, -8, -65, 8, -41, -29, -12,
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.021143661811947823, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = {
  /* [0][0][][] */ 8,45,27,38,40,29,32,36,10,-23,-16,1,19,-51,-46,-33,-34,-25,-23,7,-29,3,13,-24,44,43,26,-3,-30,4,-9,74,24,41,70,-19,-62,-15,-18,-38, 20,13,22,12,19,70,32,6,30,-30,-12,-82,-11,-36,-56,-57,25,-28,-39,6,-17,-19,26,-57,-7,22,1,1,-1,16,-14,46,45,32,22,-33,-33,-59,-65,-56, 26,29,35,9,13,53,22,15,24,-20,-19,-49,-67,-68,-25,-72,15,-21,24,11,1,-54,-4,-127,-33,12,-10,-54,18,25,-45,-4,8,32,28,-11,-31,-35,-74,-99,
  /* [1][0][][] */ -19,-95,-101,-90,-76,-94,-66,-84,-95,-37,-45,-33,-73,52,14,-4,-23,-11,-22,31,-49,-76,16,-4,27,9,-26,27,-7,-20,-29,-28,-2,2,-11,-9,17,11,-15,42, -61,-1,-4,36,21,66,29,6,50,32,17,-7,-68,-113,-19,-29,15,-39,-63,29,6,16,2,-34,9,-4,-27,-5,-19,31,-21,9,8,-5,-29,20,3,33,-12,57, -20,53,57,88,80,52,75,62,59,36,22,-17,-6,-121,-45,-12,-48,-125,-92,-127,-22,-15,-9,-20,12,26,19,40,34,53,5,3,35,22,2,-9,-8,9,-35,24,
  /* [2][0][][] */ -30,-85,-83,-53,-84,-68,-36,-7,-42,57,65,51,29,25,37,14,44,127,64,37,-31,-20,12,-9,-22,-24,5,-14,16,11,-31,42,46,22,18,23,-5,15,45,50, 53,20,24,-42,-57,-85,-60,-69,-126,-56,-36,17,35,-60,2,-5,30,23,7,2,7,13,-30,3,-2,-21,12,-2,23,24,16,47,19,14,13,-23,-24,14,2,11, 48,2,30,-1,11,-83,-15,-22,-55,-70,-50,-10,-127,-106,-48,-84,-91,-6,-20,-63,13,52,-17,46,-7,-24,16,-5,-5,25,-2,2,-8,-15,-9,12,-24,-41,-24,-64,
  /* [3][0][][] */ -109,-4,-19,24,24,-78,-110,-100,2,36,35,-50,32,-89,9,-30,-78,-50,-26,-58,-104,-103,18,-57,18,-23,-3,-57,15,66,-66,-62,-17,-37,-63,-68,2,-11,-15,-67, 30,16,17,-69,-48,6,-30,-37,-127,-37,-61,-16,37,-11,20,24,-27,38,67,55,3,-21,-7,-19,47,-39,-43,33,4,17,2,54,38,9,-17,-12,7,-37,-6,-28, 48,-30,-7,-6,10,8,-34,-40,-39,-18,-10,48,58,35,47,-5,27,61,64,41,44,-7,14,-16,16,-27,-47,-30,-53,-37,-34,-21,25,12,-20,-21,8,31,21,1,
  /* [4][0][][] */ 37,-58,-84,-1,10,-42,-48,-49,-48,-73,-69,-58,-32,7,-8,-112,-43,-79,-80,-68,-49,-127,-61,-74,-11,-18,-2,25,28,-39,-25,-72,21,-61,-91,-46,23,24,-29,10, -55,37,16,-40,-23,20,-36,-28,11,5,12,-22,-6,36,-13,-35,14,-9,-16,34,56,-18,12,8,-21,19,1,16,-18,40,61,-15,20,-2,-7,19,45,2,37,34, -24,57,87,77,83,93,78,90,35,38,46,56,94,4,-6,-7,-57,-57,-14,6,9,-39,22,-49,24,5,7,-1,21,15,-1,-3,62,21,-5,22,20,41,29,29,
  /* [5][0][][] */ 24,8,12,7,2,33,-47,-50,81,-11,20,26,-11,-46,-1,-105,-63,-1,-43,-90,-85,-57,-60,-60,54,1,87,-14,-18,-99,6,74,67,76,0,-20,-83,-34,-60,-40, -50,-73,-82,55,17,81,105,112,127,99,53,45,-22,40,53,3,42,-4,6,-41,-52,-83,-43,-21,89,86,77,29,-5,-15,30,60,64,70,21,-38,-108,3,-30,-63, -61,19,2,-104,-69,0,52,58,94,32,62,98,-1,70,96,41,64,-1,54,-44,-36,-65,0,13,91,107,62,-10,-2,-42,-20,11,66,21,9,-89,-95,-43,-69,-54,
  /* [6][0][][] */ 14,7,-4,-12,7,-127,-11,-28,-101,-12,-51,4,9,77,21,27,63,47,35,35,9,-35,-90,-37,-41,-99,-58,-62,-47,-36,-41,-20,-15,-13,-18,29,40,2,-35,-42, 56,0,9,16,-7,-97,-22,-38,-49,-14,-3,14,43,105,54,52,77,61,59,89,38,48,-8,-10,-23,-70,-67,-46,-39,-37,-21,-46,-43,-59,-22,22,57,62,-8,-39, 62,63,53,29,33,-52,20,5,-38,37,24,21,52,97,19,51,69,64,88,97,63,39,-44,-6,-34,-76,-23,-66,-35,-34,-34,-64,-27,-10,5,26,71,39,28,-35,
  /* [7][0][][] */ -100,27,36,25,23,35,34,53,-32,18,-17,27,97,11,8,-35,-50,4,-52,10,27,17,83,72,86,90,12,-30,44,46,1,-28,30,0,45,40,81,28,70,68, -89,48,44,26,-14,49,47,46,32,7,3,17,27,-34,15,-37,-65,-45,-91,-62,-35,-28,73,1,75,62,36,-30,35,25,23,-11,15,9,-18,-29,-5,32,10,12, -89,-22,-20,10,33,78,20,23,-17,-1,-31,-17,33,-17,-44,-78,-127,-75,-88,-74,-63,-35,-38,-16,29,26,-13,-21,-74,-9,-21,-32,-58,-49,-58,-46,-57,-63,-43,-26,
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.01216332521289587, 0.011779222637414932, 0.012346154078841209, 0.014434576034545898, 0.0080262143164873123, 0.005536902230232954, 0.0066092554479837418, 0.0076086032204329967, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = {
  /* [0][0][][] */ -19,30,12,42,10,9,34,-67, -12,-127,-40,-26,14,8,-13,-58, 7,-45,-58,50,-4,15,10,-52,
  /* [1][0][][] */ -57,-127,42,-20,-123,24,2,-71, -29,-82,2,-9,-39,-47,-6,-72, 5,90,53,-8,1,-35,-13,-64,
  /* [2][0][][] */ 9,98,9,-115,-6,-36,-92,-21, 47,5,-17,-127,27,14,-52,-22, -10,-8,-45,-115,21,21,-1,-18,
  /* [3][0][][] */ -40,55,-89,-60,-30,127,7,26, -45,-18,-90,-112,22,-58,-13,12, -75,-12,-93,3,-5,-76,-22,-40,
  /* [4][0][][] */ -27,-120,-10,-123,-127,-11,5,2, -24,-89,-3,-111,-122,-16,-5,8, 69,-56,-7,-22,-35,-15,-20,11,
  /* [5][0][][] */ -4,2,-103,-31,18,1,-27,10, -7,-27,-127,-99,-17,27,-79,1, 2,14,-52,-11,16,-14,-38,0,
  /* [6][0][][] */ -40,-10,-28,-127,-37,5,2,-4, -16,43,55,-116,12,41,-5,12, -22,56,38,-24,-38,-53,-35,9,
  /* [7][0][][] */ -76,16,-54,-6,-14,2,8,12, -68,-33,-125,-52,-9,-6,-5,-7, -32,-17,-127,-15,-3,-4,-10,22,
  /* [8][0][][] */ -57,-19,40,-6,15,-113,-8,-8, -127,-15,-36,117,54,-38,-15,-4, -18,-59,34,-43,-88,-123,-37,17,
  /* [9][0][][] */ -54,-33,-6,-127,-28,8,-10,-5, -85,40,20,-81,-21,-29,-22,-3, -67,17,-10,-26,-15,-52,-26,-1,
  /* [10][0][][] */ -56,-37,2,27,8,-36,-16,-101, -37,-39,-37,25,-2,-19,32,-127, -51,-103,-47,5,-4,14,9,-83,
  /* [11][0][][] */ -6,-127,-21,122,-39,9,-49,-23, -28,-44,-46,-65,27,-13,-4,-41, -76,-4,-28,89,6,-3,11,-84,
  /* [12][0][][] */ -4,4,-32,-64,74,1,-28,-2, -17,7,-84,-89,10,18,-82,-8, -17,109,-127,-63,4,41,-45,40,
  /* [13][0][][] */ -15,-25,2,61,1,-31,-36,-62, -11,-1,-41,32,-1,-9,-35,-127, -35,-3,-93,-8,4,27,29,-115,
  /* [14][0][][] */ -6,-22,-32,36,14,-60,-96,-96, -6,37,-32,-6,14,4,-54,-43, 6,10,25,-64,-2,-8,-127,0,
  /* [15][0][][] */ 59,-127,-84,-104,-83,-50,9,-19, -27,-28,-26,-22,-26,-30,-4,-23, 47,-50,-6,-26,-87,4,-16,51,
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.010947857983410358, 0.0095355622470378876, 0.0094341719523072243, 0.0061498405411839485, 0.018184948712587357, 0.014209436252713203, 0.0072189425118267536, 0.014695070683956146, 0.0090099629014730453, 0.014964709058403969, 0.012839389033615589, 0.0099309515208005905, 0.0066292542032897472, 0.015043077990412712, 0.015194060280919075, 0.0095739318057894707, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038449754938483238, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.019580084830522537, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.019580084830522537, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.019580084830522537, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.019580084830522537, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.015238289721310139, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.015238289721310139, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.015238289721310139, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.015238289721310139, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.13670901954174042, } };
const TfArray<1, int> quant21_zero = { 1, { 57 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_mic_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteStatus trained_model_mic_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22,
};
TfLiteStatus trained_model_mic_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_mic_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_mic_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
