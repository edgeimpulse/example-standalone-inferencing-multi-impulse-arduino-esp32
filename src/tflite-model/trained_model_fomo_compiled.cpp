/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.05.2023 09:09:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238304;
#else
constexpr int kTensorArenaSize = 237280;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = {
  0, 0,
  0, 1,
  0, 1,
  0, 0,
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*1] = {
  /* [0][0][][] */ -57, 49, 8,
  /* [0][1][][] */ -127, 120, -1,
  /* [0][2][][] */ -42, 46, -1,
  /* [1][0][][] */ 57, 127, 35,
  /* [1][1][][] */ -67, -78, -43,
  /* [1][2][][] */ 8, -41, 6,
  /* [2][0][][] */ 30, 27, -47,
  /* [2][1][][] */ 51, 68, -127,
  /* [2][2][][] */ 20, 31, -59,
  /* [3][0][][] */ 43, 53, 20,
  /* [3][1][][] */ 54, 75, 26,
  /* [3][2][][] */ -80, -127, -57,
  /* [4][0][][] */ 4, -53, 47,
  /* [4][1][][] */ 16, -127, 112,
  /* [4][2][][] */ 5, -37, 32,
  /* [5][0][][] */ 2, -56, 0,
  /* [5][1][][] */ -1, 127, 2,
  /* [5][2][][] */ 1, -75, 0,
  /* [6][0][][] */ -19, -86, 3,
  /* [6][1][][] */ -25, -127, -3,
  /* [6][2][][] */ -10, -46, 10,
  /* [7][0][][] */ 45, -127, 31,
  /* [7][1][][] */ -20, -5, -12,
  /* [7][2][][] */ -27, 71, -14,
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant2_scale = { 8, { 0.046580825001001358, 0.056923363357782364, 0.038935262709856033, 0.024294735863804817, 0.065681770443916321, 0.08705718070268631, 0.0029713308904320002, 0.0075556640513241291, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 14283, 9130, 1040, 27829, 2342, 7025, 84467, 3172, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00018266991537529975, 0.00022322888253256679, 0.0001526873093098402, 9.5273477199953049e-05, 0.00025757559342309833, 0.00034140073694288731, 1.165227877208963e-05, 2.9630056815221906e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*8] = {
  /* [0][0][][] */ -1,-1,13,15,10,1,8,26, 7,0,-38,127,-20,3,-4,24, -4,1,-12,17,-2,2,-6,16,
  /* [0][1][][] */ -4,-3,127,-27,127,0,-112,38, 127,-127,-106,4,-91,127,-15,-127, -29,0,13,-23,0,2,127,34,
  /* [0][2][][] */ 1,2,8,3,10,-1,15,33, 2,6,-48,-2,-15,2,-10,-103, -6,3,-9,1,2,-2,-6,36,
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.011975903995335102, 0.016021210700273514, 0.0097332857549190521, 0.015549658797681332, 0.010873799212276936, 0.015370781533420086, 0.053704686462879181, 0.1273365318775177, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[8] = { -10358, 10842, 531, -11668, -878, -14205, 276, 114, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.00028178599313832819, 0.00037696966319344938, 0.00022901849297340959, 0.00036587432259693742, 0.00025585410185158253, 0.00036166544305160642, 0.0012636396568268538, 0.0029961536638438702, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*8] = {
  /* [0][0][][] */ -21,-1,-43,-33,-17,38,-127,-6,
  /* [1][0][][] */ 19,97,-5,127,10,-8,-9,-34,
  /* [2][0][][] */ 127,-4,-36,-61,-67,48,100,-51,
  /* [3][0][][] */ 12,-127,39,-83,16,-85,30,58,
  /* [4][0][][] */ 121,2,-61,-8,26,-5,-127,-47,
  /* [5][0][][] */ 3,-35,5,40,3,-127,-1,9,
  /* [6][0][][] */ 127,-24,110,1,110,-37,-6,8,
  /* [7][0][][] */ -127,-3,-99,-2,-101,4,33,5,
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0027849606703966856, 0.0053037349134683609, 0.0039984514005482197, 0.0024459159467369318, 0.0052929408848285675, 0.0085553014650940895, 0.0043254396878182888, 0.0075502912513911724, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 4270, -5023, -367, 3347, 2455, 586, -3187, 3047, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 6.5528489358257502e-05, 0.00012479376164264977, 9.4081209681462497e-05, 5.7550965721020475e-05, 0.00012453978706616908, 0.00020130121265538037, 0.00010177505464525893, 0.00017765391385182738, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = {
  /* [0][0][][] */ -101,-106,24,-127,-57,-5,-3,-6,
  /* [1][0][][] */ -127,-18,101,1,-48,29,7,16,
  /* [2][0][][] */ 26,-15,32,127,28,-32,-19,-5,
  /* [3][0][][] */ -99,-63,-25,-9,42,127,-38,-36,
  /* [4][0][][] */ -8,-28,-7,-1,-9,7,-127,-69,
  /* [5][0][][] */ -4,-34,-13,-1,-14,15,-127,-69,
  /* [6][0][][] */ 127,9,17,-11,-67,18,4,-6,
  /* [7][0][][] */ -127,-26,-14,4,68,13,2,9,
  /* [8][0][][] */ 21,47,-10,-7,-32,-127,42,23,
  /* [9][0][][] */ 74,20,-12,-7,-23,-2,-7,127,
  /* [10][0][][] */ 117,-6,-127,11,-85,-3,44,124,
  /* [11][0][][] */ -127,108,9,-37,99,-67,11,19,
  /* [12][0][][] */ 127,-38,-113,9,55,0,-8,-23,
  /* [13][0][][] */ 127,9,9,-13,-30,26,5,-11,
  /* [14][0][][] */ -127,-70,106,-19,62,-10,-37,-116,
  /* [15][0][][] */ 35,85,3,-5,-3,-127,-14,5,
  /* [16][0][][] */ -11,-61,10,2,12,127,12,6,
  /* [17][0][][] */ 34,-108,-73,-7,-30,127,-46,-15,
  /* [18][0][][] */ 39,-22,-12,-18,-19,27,127,-11,
  /* [19][0][][] */ -6,26,-3,-127,-10,35,-1,-12,
  /* [20][0][][] */ -82,-27,76,12,58,105,-3,-127,
  /* [21][0][][] */ -19,-10,34,-20,-22,14,-127,-84,
  /* [22][0][][] */ 79,-18,16,127,-17,-25,57,44,
  /* [23][0][][] */ 118,-17,-127,-21,23,-30,6,8,
  /* [24][0][][] */ -33,19,32,38,7,1,-127,-81,
  /* [25][0][][] */ 127,11,-84,5,14,-8,6,26,
  /* [26][0][][] */ -1,53,-30,-127,-26,22,3,-4,
  /* [27][0][][] */ 127,20,-104,4,-108,54,26,82,
  /* [28][0][][] */ -127,-21,-21,15,58,11,-2,34,
  /* [29][0][][] */ -6,-127,-17,-124,-7,28,-16,-21,
  /* [30][0][][] */ -11,93,127,38,32,-90,111,38,
  /* [31][0][][] */ -73,-4,-127,47,5,-29,94,99,
  /* [32][0][][] */ -6,-124,3,-127,-15,10,-12,-16,
  /* [33][0][][] */ 14,-127,-3,-122,9,15,6,-27,
  /* [34][0][][] */ -24,-45,30,-94,39,-57,127,74,
  /* [35][0][][] */ -127,5,58,1,-112,-25,26,100,
  /* [36][0][][] */ -127,13,124,-1,-40,16,-37,40,
  /* [37][0][][] */ 127,13,-4,-7,-73,18,4,12,
  /* [38][0][][] */ -75,4,73,35,58,-50,44,127,
  /* [39][0][][] */ -127,-6,72,-5,-67,12,-7,5,
  /* [40][0][][] */ 2,33,43,-17,27,-10,127,50,
  /* [41][0][][] */ 127,-12,-72,1,56,14,10,-10,
  /* [42][0][][] */ -13,-127,31,-6,16,5,-5,-20,
  /* [43][0][][] */ 2,108,127,-7,41,-85,71,5,
  /* [44][0][][] */ 3,-5,2,110,1,-127,4,-3,
  /* [45][0][][] */ 127,-33,33,-6,-58,105,11,-1,
  /* [46][0][][] */ 8,127,-8,106,-4,121,26,39,
  /* [47][0][][] */ -15,41,14,-25,28,-31,127,74,
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0048408019356429577, 0.0067243059165775776, 0.0012612224090844393, 0.01064305379986763, 0.0051543028093874454, 0.0051158634014427662, 0.022862689569592476, 0.013198413886129856, 0.012562224641442299, 0.0070383781567215919, 0.001958365086466074, 0.0057789785787463188, 0.0050622862763702869, 0.013762333430349827, 0.0074315564706921577, 0.019899044185876846, 0.013181825168430805, 0.0043366206809878349, 0.013148203492164612, 0.0216679647564888, 0.010571286082267761, 0.00472675496712327, 0.0014365589013323188, 0.005313764326274395, 0.013750323094427586, 0.0097263185307383537, 0.011896240524947643, 0.0058225071988999844, 0.012556855566799641, 0.0087425056844949722, 0.0037052799016237259, 0.0071132075972855091, 0.0091825183480978012, 0.0031387119088321924, 0.0051116500981152058, 0.0041528386063873768, 0.0057983198203146458, 0.019398290663957596, 0.006345823872834444, 0.0070838653482496738, 0.017207745462656021, 0.0068041533231735229, 0.01012320164591074, 0.0031473571434617043, 0.017737919464707375, 0.0084040993824601173, 0.0070814071223139763, 0.0053039100021123886, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 11209, 4648, 11230, 1595, 4675, 4424, -4319, 4357, 2547, -2751, -3699, 5070, -3135, -4730, 7258, 1332, -2190, 1454, -1757, 3189, -241, 4571, 2308, -1688, -375, -4821, 2850, -4519, 3929, 7742, 291, 473, 7884, 11256, 8172, 5043, 5672, -4704, 877, 4935, -1068, -4642, 3960, 1704, 271, -6656, -11857, 2139, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00037294591311365366, 0.00051805516704916954, 9.7167321655433625e-05, 0.00081996404333040118, 0.00039709871634840965, 0.00039413725608028471, 0.0017613914096727967, 0.0010168345179408789, 0.00096782116452232003, 0.00054225197527557611, 0.00015087671636138111, 0.00044522510142996907, 0.00039000954711809754, 0.0010602801339700818, 0.00057254330022260547, 0.001533065689727664, 0.0010155565105378628, 0.00033410268952138722, 0.0010129662696272135, 0.0016693471698090434, 0.00081443489762023091, 0.00036415949580259621, 0.00011067562445532531, 0.00040938396705314517, 0.0010593548649922013, 0.00074933673022314906, 0.00091651227558031678, 0.00044857861939817667, 0.00096740748267620802, 0.00067354168277233839, 0.00028546282555907965, 0.00054801697842776775, 0.00070744118420407176, 0.00024181320623029023, 0.00039381266105920076, 0.00031994373421184719, 0.00044671518844552338, 0.0014944865833967924, 0.00048889609752222896, 0.00054575642570853233, 0.0013257222017273307, 0.00052420678548514843, 0.00077991350553929806, 0.00024247924739029258, 0.0013665679143741727, 0.00064747012220323086, 0.00054556701797991991, 0.00040862476453185081, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = {
  /* [0][0][][] */ -20,-83,-96,89,-84,4,-97,-78,50,48,127,-43,-1,9,-73,-52,108,-82,34,-43,-11,-109,-26,-83,78,107,4,-127,8,-34,61,78,56,68,67,21,89,92,35,12,-127,-15,20,49,-62,96,-40,-98, 88,-13,41,81,-127,43,-65,13,93,112,112,56,-13,-74,-112,-102,125,-36,98,-80,-113,126,127,34,127,92,50,-113,-72,-45,-103,117,104,127,104,104,-16,88,63,-74,-82,-78,9,-54,-80,111,-40,102, 96,-8,64,70,-81,11,-26,-9,24,83,20,-33,-82,0,-32,-47,45,83,54,-17,-59,-30,-75,72,29,14,27,-47,0,-36,31,39,54,96,13,71,-5,23,40,-9,-63,-4,0,13,-31,91,-5,-1,
  /* [0][1][][] */ 41,-127,115,95,92,-72,-127,-127,110,69,101,-50,-1,-4,-113,-91,96,127,47,-107,-27,109,30,-127,88,126,106,-116,4,-112,-72,96,113,-2,106,55,28,105,58,1,-24,-30,106,100,-110,127,-110,116, 127,-15,1,127,123,-127,-111,7,127,127,117,53,-35,-127,-127,-127,127,62,127,-127,-127,-127,-98,48,112,127,127,-107,-127,-127,127,127,127,9,127,127,-3,127,127,-127,3,-127,127,-80,-123,93,-121,-127, 97,-7,-127,66,85,-62,-54,-7,27,86,21,-21,-127,0,-36,-33,41,-97,70,-29,-73,5,73,65,50,38,1,-51,-10,-87,-29,38,48,-2,26,73,2,21,65,-2,-33,-4,57,-7,-60,82,-44,17,
  /* [0][2][][] */ 59,-74,9,28,-2,68,-85,-81,25,15,40,49,9,3,-61,-22,25,-32,28,-66,-10,-4,16,-85,25,41,75,-12,9,-110,13,25,57,-71,73,22,-127,16,6,-1,11,-9,76,-127,-93,76,-67,-6, 47,1,10,62,6,93,-33,1,21,54,29,-127,-23,-89,-54,-34,47,-6,51,-94,-35,-16,-22,32,35,43,71,-31,-79,-113,-25,25,58,-77,62,31,23,24,57,-49,108,-67,96,107,-127,45,-127,21, -33,-11,-1,37,-23,39,-18,-6,9,29,-31,42,-68,0,-30,3,9,27,33,2,-34,16,16,24,17,28,18,-7,-7,-57,16,-15,-4,-37,11,18,10,-22,36,11,44,5,16,-5,-42,75,-34,3,
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0043110190890729427, 0.0057062278501689434, 0.0251966193318367, 0.0029648668132722378, 0.023789249360561371, 0.027259770780801773, 0.0057866424322128296, 0.007385909091681242, 0.0028108875267207623, 0.0087804663926362991, 0.019866058602929115, 0.01061500608921051, 0.0084174294024705887, 0.0070794112980365753, 0.0023629448842257261, 0.002364080399274826, 0.0048171151429414749, 0.019206864759325981, 0.0027412376366555691, 0.0037265191785991192, 0.00249112443998456, 0.029628615826368332, 0.050827305763959885, 0.010979557409882545, 0.0025137902703136206, 0.004966257605701685, 0.0039654015563428402, 0.0046633691526949406, 0.0073347100988030434, 0.0050198682583868504, 0.019363600760698318, 0.01397301722317934, 0.0038665784522891045, 0.010743697173893452, 0.0028755404055118561, 0.0028956292662769556, 0.012451270595192909, 0.014639844186604023, 0.0049672364257276058, 0.0081421723589301109, 0.0037193822208791971, 0.009055212140083313, 0.0054214224219322205, 0.014951986260712147, 0.0035239083226770163, 0.0091047808527946472, 0.0039797313511371613, 0.027152771130204201, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 732, 9051, -877, -1449, 404, 138, 8377, 7521, 1021, -6916, -288, 988, 7447, 4726, 24428, 16733, -1142, -2444, 1673, 5628, 16689, 1133, -1606, 93, 4668, 788, 4791, 18795, 6454, 13160, -606, 1871, -1515, -4843, 464, 737, 79, 366, 199, 4226, 7440, 4429, -5752, -238, 4416, -900, 9773, -943, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0001014357476378791, 0.0001342641917290166, 0.00059286161558702588, 6.9761576014570892e-05, 0.00055974704446271062, 0.0006414063973352313, 0.00013615628995466977, 0.00017378610209561884, 6.6138534748461097e-05, 0.00020659921574406326, 0.00046743667917326093, 0.00024976485292427242, 0.00019805716874543577, 0.00016657439118716866, 5.5598702601855621e-05, 5.5625423556193709e-05, 0.00011334388545947149, 0.00045192622928880155, 6.4499712607357651e-05, 8.7682805315125734e-05, 5.8614692534320056e-05, 0.0006971438997425139, 0.0011959365801885724, 0.00025834253756329417, 5.914800931350328e-05, 0.00011685312347253785, 9.33035698835738e-05, 0.00010972633754136041, 0.00017258142179343849, 0.00011811454896815121, 0.00045561415026895702, 0.00032877689227461815, 9.0978319349233061e-05, 0.00025279287365265191, 6.765977741451934e-05, 6.8132452724967152e-05, 0.00029297108994796872, 0.00034446694189682603, 0.00011687615187838674, 0.00019158053328283131, 8.751487621339038e-05, 0.00021306381677277386, 0.00012756288924720138, 0.00035181143903173506, 8.291548874694854e-05, 0.00021423013822641224, 9.364073775941506e-05, 0.0006388887413777411, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = {
  /* [0][0][][] */ 46,105,-39,70,-2,-5,-25,13,66,-61,3,-27,8,8,-33,-53,0,-21,34,18,-56,-30,-35,10,18,19,26,-2,19,14,-19,31,-63,11,112,-127,-21,26,-10,117,-29,16,13,2,-14,40,25,-43,
  /* [1][0][][] */ -2,-47,28,58,-15,-15,-16,-26,40,-40,91,40,17,10,-43,-75,127,37,19,12,-70,29,33,-10,-48,-86,-35,-52,-14,-55,41,-36,-14,-27,-32,12,6,-15,81,-48,-18,36,-59,37,78,60,17,45,
  /* [2][0][][] */ 76,-25,-8,-17,110,109,63,76,-27,-6,0,-28,-10,49,59,25,-29,-33,64,-67,-37,-52,-43,62,-90,-97,117,22,61,-74,-58,16,-127,93,105,12,-13,-3,-9,19,28,61,23,-58,-28,24,59,-39,
  /* [3][0][][] */ 77,-39,20,-7,116,125,29,46,-35,-26,31,58,-127,45,72,28,12,7,73,-102,-91,16,29,91,15,-42,52,26,47,-55,4,-9,-123,58,-65,-117,25,-37,72,-48,53,-91,-118,-27,-59,45,-7,57,
  /* [4][0][][] */ 38,42,-32,-36,-12,-10,-17,-20,2,-9,-13,-13,-35,-23,64,50,-42,-16,-36,38,27,-11,-16,5,-54,-41,-4,48,-13,9,-23,28,-31,-16,24,-127,-10,25,6,52,5,-13,-13,-24,36,-3,84,-19,
  /* [5][0][][] */ 65,52,-81,49,7,4,-5,24,-75,-55,-53,-22,29,19,40,31,41,-58,39,127,-64,-48,-54,50,31,-25,-34,65,31,27,-56,0,-2,5,-51,-1,-3,11,-20,64,18,74,-6,-43,119,29,19,-62,
  /* [6][0][][] */ -33,-73,20,-50,-41,-39,-79,-73,-33,-65,-115,40,-53,-50,96,87,-127,11,20,-18,17,55,66,12,-13,-8,-70,84,-78,-36,43,71,13,-54,85,36,24,41,-12,-85,-13,-58,-33,15,-44,-18,-14,62,
  /* [7][0][][] */ 74,18,-17,39,13,14,10,6,82,-8,-14,-19,60,9,-12,-23,-55,-7,-29,0,2,-22,-22,-25,68,-127,16,-3,0,100,-18,20,-78,21,-61,-48,-13,26,27,23,25,70,-40,-16,-48,31,42,-27,
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0057830996811389923, 0.004973012488335371, 0.0046564862132072449, 0.0029590183403342962, 0.0066263033077120781, 0.0055824778974056244, 0.0054492978379130363, 0.0049868347123265266, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -12503, 1588, -16303, 610, 3472, -4050, 11122, 1508, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00013607293658424169, 0.00011701205949066207, 0.0001095643820008263, 6.9623965828213841e-05, 0.00015591301780659705, 0.00013135242625139654, 0.00012821877317037433, 0.00011733728752005845, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = {
  /* [0][0][][] */ -26,33,20,-127,-91,-8,20,122,
  /* [1][0][][] */ 99,18,-15,2,-83,54,127,29,
  /* [2][0][][] */ -3,112,-29,-23,-39,92,-47,-127,
  /* [3][0][][] */ 65,-74,-71,127,-124,-49,-5,-19,
  /* [4][0][][] */ 48,-71,57,-9,-127,-8,51,32,
  /* [5][0][][] */ -14,49,-7,-88,-127,-9,-28,6,
  /* [6][0][][] */ 36,-18,45,40,127,-38,-4,-98,
  /* [7][0][][] */ 11,33,25,127,25,-12,-4,22,
  /* [8][0][][] */ 29,24,15,-40,39,127,14,-37,
  /* [9][0][][] */ 120,18,-14,20,-51,-49,127,51,
  /* [10][0][][] */ -4,71,-74,-37,12,127,75,-55,
  /* [11][0][][] */ -17,-38,-127,103,-60,28,-12,75,
  /* [12][0][][] */ -96,-80,50,49,36,-127,-44,11,
  /* [13][0][][] */ 42,36,32,53,-53,127,11,-37,
  /* [14][0][][] */ 9,-127,7,3,-54,-108,-120,108,
  /* [15][0][][] */ -93,52,-11,12,107,-4,-127,-50,
  /* [16][0][][] */ 92,84,-102,-127,69,119,103,30,
  /* [17][0][][] */ -94,127,-119,46,-6,-19,18,-109,
  /* [18][0][][] */ 39,1,-99,127,-7,-29,-47,-62,
  /* [19][0][][] */ 119,13,9,34,-44,8,127,55,
  /* [20][0][][] */ 44,-73,-101,127,52,-18,-39,-68,
  /* [21][0][][] */ 27,49,127,-103,33,-27,36,-107,
  /* [22][0][][] */ -75,-25,-127,65,-21,41,-5,116,
  /* [23][0][][] */ 77,17,31,37,-127,116,70,-38,
  /* [24][0][][] */ -11,-1,-127,74,-40,30,51,64,
  /* [25][0][][] */ 41,-30,-75,127,56,-5,-29,-17,
  /* [26][0][][] */ -71,12,127,-85,-4,16,52,-8,
  /* [27][0][][] */ -64,76,127,4,27,-11,66,15,
  /* [28][0][][] */ -50,-99,36,-127,-24,11,-4,-18,
  /* [29][0][][] */ -75,-78,-23,92,6,-127,-15,63,
  /* [30][0][][] */ -127,44,125,-13,40,31,81,26,
  /* [31][0][][] */ -60,48,85,-127,-46,16,33,58,
  /* [32][0][][] */ -84,76,90,-113,24,-4,3,127,
  /* [33][0][][] */ 1,113,-59,44,21,22,-127,-30,
  /* [34][0][][] */ 94,2,122,-117,-101,-127,52,-39,
  /* [35][0][][] */ 86,-10,33,107,84,-68,14,-127,
  /* [36][0][][] */ 20,64,127,-126,33,-19,33,-121,
  /* [37][0][][] */ -48,-46,108,71,-2,-127,95,-19,
  /* [38][0][][] */ 73,1,69,47,-27,-61,127,25,
  /* [39][0][][] */ 50,-84,-21,7,-127,7,81,68,
  /* [40][0][][] */ -41,48,-127,120,-67,56,-72,121,
  /* [41][0][][] */ -107,-17,-52,2,127,17,-87,14,
  /* [42][0][][] */ -84,81,-27,-34,127,46,-102,-64,
  /* [43][0][][] */ 117,116,-27,127,-3,-101,58,72,
  /* [44][0][][] */ 5,33,111,20,33,-127,33,-30,
  /* [45][0][][] */ -5,-73,127,83,-28,-17,-120,20,
  /* [46][0][][] */ 42,-127,-125,62,-89,13,-5,-11,
  /* [47][0][][] */ -99,-33,39,-6,81,33,-127,-34,
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0024569963570684195, 0.0041890190914273262, 0.00068860728060826659, 0.0042020166292786598, 0.0048642363399267197, 0.0028027945663779974, 0.0043086656369268894, 0.0089355222880840302, 0.0045668547973036766, 0.0045796707272529602, 0.0021005673334002495, 0.0054502235725522041, 0.003496857825666666, 0.0036272562574595213, 0.0029529135208576918, 0.0031422297470271587, 0.0030993532855063677, 0.0036333946045488119, 0.0063769994303584099, 0.0026956710498780012, 0.0049389642663300037, 0.0053694215603172779, 0.0040443465113639832, 0.0013298066332936287, 0.00093688716879114509, 0.0039266552776098251, 0.0045185568742454052, 0.0061791562475264072, 0.0081966128200292587, 0.0025859973393380642, 0.0024621386546641588, 0.0017376429168507457, 0.0016625580610707402, 0.0027044415473937988, 0.0018607159145176411, 0.0034549462143331766, 0.0048142401501536369, 0.0033103146124631166, 0.0019218953093513846, 0.0023840446956455708, 0.0033639681059867144, 0.0012620968045666814, 0.0015245653921738267, 0.003659744979813695, 0.0025401741731911898, 0.0058595314621925354, 0.0035772994160652161, 0.0044440389610826969, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 5741, 2075, 31172, -1840, -1262, 6383, -501, 983, 2069, -21, 6938, 614, 2659, 3473, 3255, 4148, 2672, 2349, -845, 5549, 1035, 214, 1370, 12712, 27738, 3439, 2933, -962, -156, 5210, 6136, 9529, 9716, 5277, 8338, -895, 619, 1925, 7741, 6064, 588, 13637, 11993, 3499, 5639, 1645, 3761, 878, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.0001478554040659219, 0.00025208384613506496, 4.1438524931436405e-05, 0.00025286601157858968, 0.00029271660605445504, 0.00016866459918674082, 0.00025928384275175631, 0.00053771556122228503, 0.00027482098084874451, 0.0002755922032520175, 0.0001264064630959183, 0.00032797970925457776, 0.00021043144806753844, 0.00021827848104294389, 0.00017769835540093482, 0.00018909088976215571, 0.00018651070422492921, 0.00021864786685910076, 0.00038375059375539422, 0.0001622182026039809, 0.00029721352620981634, 0.00032311727409251034, 0.00024337784270755947, 8.002416871022433e-05, 5.6379336456302553e-05, 0.00023629549832548946, 0.0002719145268201828, 0.00037184491520747542, 0.0004932499723508954, 0.0001556183269713074, 0.00014816485054325312, 0.00010456665040692315, 0.00010004825162468478, 0.00016274598601739854, 0.00011197285493835807, 0.00020790932467207313, 0.00028970796847715974, 0.00019920578051824123, 0.00011565446038730443, 0.00014346536772791296, 0.00020243450126145035, 7.5949574238620698e-05, 9.1744223027490079e-05, 0.00022023355995770544, 0.00015286081179510802, 0.00035261077573522925, 0.00021527220087591559, 0.00026743023772723973, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = {
  /* [0][0][][] */ -9,-50,42,-20,127,-6,-12,-19,-22,42,0,6,59,29,127,-39,11,-24,-43,-20,-24,-12,-79,20,-111,54,29,-53,-7,16,-19,-2,-33,24,17,2,83,61,30,-4,76,17,-15,1,-98,-2,-53,-43, 4,-112,-66,-22,-41,-6,43,14,24,-6,73,127,-20,80,-67,127,-1,-95,45,-52,-81,-127,-96,78,-127,-85,26,106,20,36,127,14,-127,-102,-45,35,127,-82,117,16,55,-11,-25,-8,-47,-9,69,-2, 13,-23,-13,127,52,4,-93,-7,-16,-41,-20,-22,47,-2,-71,-46,14,4,-2,-10,-6,7,-42,8,-48,-69,-28,23,6,31,-98,-2,16,61,19,19,8,82,-127,5,22,-5,-10,29,-127,4,-66,45,
  /* [0][1][][] */ -118,-76,127,1,-45,-39,70,17,24,102,19,7,50,24,100,30,23,-120,73,38,92,-4,48,-44,-6,-15,31,-60,29,50,35,49,43,-93,4,127,9,44,-43,-112,35,89,-18,-83,38,-81,-75,16, 127,-74,-68,-64,2,-127,127,127,127,13,127,-54,-127,39,-38,-42,127,-127,127,127,127,89,127,-127,0,-27,110,-26,127,127,-126,127,40,-104,127,-108,-66,127,-104,127,-127,-127,127,-127,114,-127,127,-127, -15,-121,11,68,-27,-15,-57,11,-8,-127,-33,49,83,4,-69,43,22,-8,3,16,-9,-21,38,-27,0,6,-127,62,-57,8,71,21,-12,-89,-18,-44,62,11,125,14,23,48,-42,6,63,-21,-67,127,
  /* [0][2][][] */ -13,115,32,-23,72,11,-51,-19,-21,29,4,0,63,0,98,6,-25,-1,-15,-49,-12,18,-14,4,-25,-13,26,1,-40,-110,-14,-3,-1,36,-18,32,-56,54,14,106,18,16,-1,13,29,1,-26,-49, -3,91,-41,21,34,-44,-3,24,33,11,29,-39,44,127,-71,-77,-2,-37,100,-80,-48,86,-15,42,58,127,6,127,-59,-110,-17,4,106,-127,-84,0,-64,-29,-29,-122,44,-24,-56,86,63,23,9,5, 8,127,-16,32,29,5,-66,-5,-17,-18,-7,-8,57,-20,-76,-2,-4,3,-28,-27,-13,9,-11,-5,-51,28,-40,3,43,-78,14,5,9,44,-1,-19,-44,68,14,1,-29,-9,3,-14,16,9,-12,31,
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.012891125865280628, 0.0048683122731745243, 0.025728760287165642, 0.0075003956444561481, 0.0082612987607717514, 0.012001612223684788, 0.010165365412831306, 0.008680243045091629, 0.012973340228199959, 0.006583251990377903, 0.015523755922913551, 0.0088987462222576141, 0.005647280253469944, 0.005615264642983675, 0.0054673198610544205, 0.019148716703057289, 0.011556551791727543, 0.0037431553937494755, 0.0071554831229150295, 0.020367085933685303, 0.010500708594918251, 0.013068059459328651, 0.0086745675653219223, 0.036117691546678543, 0.011654110625386238, 0.012065915390849113, 0.009004649706184864, 0.0084332749247550964, 0.0087779359892010689, 0.0078521259129047394, 0.015744807198643684, 0.021846510469913483, 0.017790043726563454, 0.0050590513274073601, 0.022425742819905281, 0.0078222677111625671, 0.0080660087987780571, 0.0037037257570773363, 0.020633473992347717, 0.033139921724796295, 0.0090828463435173035, 0.033804353326559067, 0.025124037638306618, 0.0077421562746167183, 0.0085812155157327652, 0.0055017843842506409, 0.0083742262795567513, 0.0096862763166427612, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 404, 3135, -295, -278, -166, 10585, 577, -3352, -6751, -905, -8643, 428, -4856, -5899, -162, -93, -7918, 18058, -2893, 725, -573, -969, 935, 2019, 19989, 45, -966, -830, -774, 93, 1039, -8728, -1605, 12095, -188, 7331, 26, -4526, -113, -1196, -4306, 18, 3572, 4372, -1895, 6683, 2301, -2070, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00030332061578519642, 0.00011454852938186377, 0.00060538260731846094, 0.0001764798944350332, 0.00019438350864220411, 0.00028239088715054095, 0.00023918507213238627, 0.0002042410196736455, 0.00030525506008416414, 0.00015490004443563521, 0.00036526485928334296, 0.00020938226953148842, 0.00013287719048094004, 0.00013212388148531318, 0.00012864281598012894, 0.0004505580582190305, 0.00027191886329092085, 8.8074244558811188e-05, 0.00016836430586408824, 0.00047922556404955685, 0.00024707551347091794, 0.00030748374410904944, 0.00020410747674759477, 0.00084982806583866477, 0.00027421436971053481, 0.00028390390798449516, 0.0002118741103913635, 0.00019843000336550176, 0.00020653966930694878, 0.00018475590331945568, 0.00037046606303192675, 0.00051403557881712914, 0.00041858927579596639, 0.00011903650738531724, 0.00052766455337405205, 0.00018405336595606059, 0.00018978845037054271, 8.7146487203426659e-05, 0.00048549351049587131, 0.000779762864112854, 0.00021371404000092298, 0.00079539656871929765, 0.00059115386102348566, 0.00018216838361695409, 0.00020191095245536417, 0.00012945375056006014, 0.00019704061560332775, 0.0002279123873449862, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = {
  /* [0][0][][] */ 40,-41,108,70,31,-43,27,5,-3,62,-27,20,-58,-78,44,7,-105,60,-33,69,-46,81,0,-26,-2,-52,72,-30,-22,26,-29,107,-67,-11,-31,-88,-66,-50,-28,-12,-8,61,-127,11,61,28,27,50,
  /* [1][0][][] */ -66,-35,57,-2,-31,31,-42,-36,57,-10,6,-26,-22,25,-3,24,12,19,24,-7,-55,-25,-74,-24,29,-38,-28,-40,24,-68,-12,-127,1,-65,-68,-78,-47,-94,-30,28,52,-11,86,-110,-51,-12,-29,-1,
  /* [2][0][][] */ -60,80,-11,40,12,9,16,-35,77,-40,72,80,92,17,24,-55,95,-4,7,32,-14,15,17,127,-102,-38,10,-22,-8,83,-22,-87,-21,-2,2,-79,-21,5,-39,-17,84,-74,25,-8,23,-110,8,-7,
  /* [3][0][][] */ 61,-19,-55,33,84,-82,5,-109,-29,-3,-53,-85,-24,127,-9,22,-42,-18,-62,-40,32,77,-5,-41,112,39,53,-63,22,-87,52,-65,48,62,111,-70,-40,18,-22,45,22,88,-72,24,-1,25,12,38,
  /* [4][0][][] */ -57,28,-43,72,103,-27,31,-40,-44,-9,-71,30,-40,-23,3,-62,7,72,-38,-45,-45,37,-71,-70,14,-7,16,-36,39,-42,-31,61,-6,83,-67,-71,-60,-61,-43,-4,62,-60,127,20,1,83,-59,-59,
  /* [5][0][][] */ 53,3,91,-14,-7,16,53,41,127,-1,70,-1,65,56,25,-66,-14,32,24,-43,-69,-77,11,40,18,-23,30,42,-41,-36,13,-26,-27,52,-14,55,57,0,-22,-55,-5,68,27,38,-10,-10,67,-4,
  /* [6][0][][] */ -2,-66,-20,14,31,-5,-5,10,-45,-14,107,63,92,70,-35,47,119,-127,-20,2,-14,-36,-99,35,-73,63,-29,-3,-21,-52,69,-53,93,19,-70,-28,-44,7,66,13,78,-70,-1,-83,-102,49,-43,23,
  /* [7][0][][] */ -14,-20,-63,-30,15,112,0,-7,2,-57,-127,-104,49,59,-66,-42,-31,27,112,30,-10,-76,67,-16,119,-26,-77,91,-44,-3,-29,-87,-47,68,53,120,96,-63,-26,-40,-23,-1,45,-16,-8,-24,12,-51,
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0057210209779441357, 0.0053698583506047726, 0.0062758876010775566, 0.0092807840555906296, 0.0054246671497821808, 0.0060248649679124355, 0.0031289858743548393, 0.0047196135856211185, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 10225, 15840, 4703, 2236, 2829, -11935, 5732, -7936, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00013461225898936391, 0.00012634960876312107, 0.00014766794629395008, 0.00021837139502167702, 0.0001276392285944894, 0.00014176152762956917, 7.3623195930849761e-05, 0.00011104973236797377, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = {
  /* [0][0][][] */ 44,19,-59,8,-39,55,-127,39,
  /* [1][0][][] */ 3,-63,-116,-4,-9,-21,127,-107,
  /* [2][0][][] */ -121,-46,-75,-56,-30,47,-127,-9,
  /* [3][0][][] */ -72,-43,15,-12,-25,-127,-122,-24,
  /* [4][0][][] */ -45,-127,-41,12,60,24,-43,-40,
  /* [5][0][][] */ 71,-37,84,55,-127,53,-67,-88,
  /* [6][0][][] */ 44,-127,-61,-29,-12,63,-42,-94,
  /* [7][0][][] */ -24,-85,-51,-57,79,-127,4,16,
  /* [8][0][][] */ 38,59,39,56,28,-46,-7,127,
  /* [9][0][][] */ -26,-56,-42,3,43,-19,127,-10,
  /* [10][0][][] */ -31,13,-127,20,30,14,98,-112,
  /* [11][0][][] */ 10,-36,-28,1,-127,19,6,55,
  /* [12][0][][] */ 102,73,-30,47,-80,127,84,-9,
  /* [13][0][][] */ -50,-8,23,-20,39,-127,3,65,
  /* [14][0][][] */ -92,-43,5,38,11,67,-115,-127,
  /* [15][0][][] */ 50,92,42,2,-122,50,127,-63,
  /* [16][0][][] */ -1,-58,9,70,-6,-83,6,-127,
  /* [17][0][][] */ -79,127,23,-13,-59,-48,-84,-77,
  /* [18][0][][] */ 92,117,-109,-127,110,91,-101,-87,
  /* [19][0][][] */ -29,76,-9,8,-127,11,-68,-93,
  /* [20][0][][] */ -127,-2,4,10,18,24,93,52,
  /* [21][0][][] */ -37,-9,50,24,-94,-115,-127,15,
  /* [22][0][][] */ -3,-30,-44,-8,-127,11,2,55,
  /* [23][0][][] */ 56,7,-14,-16,127,60,-86,78,
  /* [24][0][][] */ 127,2,-36,22,-76,-1,2,-13,
  /* [25][0][][] */ 25,-66,48,100,-44,-127,22,103,
  /* [26][0][][] */ 31,127,16,66,90,-31,25,-26,
  /* [27][0][][] */ -115,103,71,-11,127,-70,11,96,
  /* [28][0][][] */ -81,-74,-74,-33,85,-127,22,-18,
  /* [29][0][][] */ -66,-19,35,41,127,-82,-83,73,
  /* [30][0][][] */ 127,44,-120,-108,-72,-95,-83,-75,
  /* [31][0][][] */ 28,6,36,70,-127,13,39,1,
  /* [32][0][][] */ 127,20,46,45,-32,-57,92,53,
  /* [33][0][][] */ 127,28,-37,9,-115,-65,20,39,
  /* [34][0][][] */ 40,-11,-24,24,-42,127,12,-82,
  /* [35][0][][] */ 127,37,-22,-46,41,-103,27,122,
  /* [36][0][][] */ -38,-42,64,-94,-26,-23,83,-127,
  /* [37][0][][] */ 88,-73,66,53,112,-11,37,-127,
  /* [38][0][][] */ 68,127,10,-26,-23,25,25,75,
  /* [39][0][][] */ 32,-5,-71,77,-36,-64,-76,127,
  /* [40][0][][] */ -14,-28,-4,-36,29,-127,26,38,
  /* [41][0][][] */ -22,40,-126,-58,99,111,71,-127,
  /* [42][0][][] */ 21,-51,-34,19,67,127,36,58,
  /* [43][0][][] */ -4,66,-37,29,-127,-85,71,-71,
  /* [44][0][][] */ -124,-55,-17,-38,61,53,-127,-87,
  /* [45][0][][] */ -57,61,-47,19,35,-11,-76,127,
  /* [46][0][][] */ -25,50,127,-5,-60,-61,-48,47,
  /* [47][0][][] */ -126,-127,-41,-42,106,124,-42,110,
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0027740916702896357, 0.0014677587896585464, 0.0015520678134635091, 0.0028132784646004438, 0.0041462196968495846, 0.0008931370684877038, 0.0024497502017766237, 0.0024209101684391499, 0.00091071322094649076, 0.0038984518032521009, 0.002182110445573926, 0.0028702092822641134, 0.0017000837251543999, 0.002756570465862751, 0.0043653678148984909, 0.0019709377083927393, 0.0026028936263173819, 0.0012059456203132868, 0.0015841568820178509, 0.003648197278380394, 0.0034090010449290276, 0.0027622792404145002, 0.0031156488694250584, 0.0029519188683480024, 0.003380289301276207, 0.001859046402387321, 0.0022717670071870089, 0.0021735932677984238, 0.002383482875302434, 0.0018967728829011321, 0.00095014960970729589, 0.002351841889321804, 0.0031244179699569941, 0.0030564931221306324, 0.0027461410500109196, 0.0028590306174010038, 0.0023363486398011446, 0.0010326429037377238, 0.0034553359728306532, 0.0024192370474338531, 0.0014174209209159017, 0.0012857926776632667, 0.0038531925529241562, 0.0028619675431400537, 0.0026459170039743185, 0.0023458644282072783, 0.00087370799155905843, 0.0016000336036086082, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { -1614, 5510, 4810, -660, 144, 9328, 3175, 1342, 10544, 1262, -1697, 1585, 3298, 1640, -155, 848, -1194, 7260, -2634, -729, 1075, 764, 340, -361, 249, 2638, -1944, -1418, -992, -1934, 10700, 2470, 744, 905, 336, 1287, 1226, 7732, 1108, 539, 6147, -2056, 486, 1113, -1737, -1838, 11245, 2914, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00030730632715858519, 0.0001625943259568885, 0.00017193384701386094, 0.00031164733809418976, 0.00045930693158879876, 9.8939293820876628e-05, 0.0002713766589295119, 0.00026818184414878488, 0.0001008863328024745, 0.00043185989488847554, 0.00024172826670110226, 0.00031795399263501167, 0.00018833065405488014, 0.00030536539270542562, 0.00048358357162214816, 0.0002183351170970127, 0.00028834148542955518, 0.00013359138392843306, 0.0001754885888658464, 0.00040413736132904887, 0.00037763986620120704, 0.00030599778983741999, 0.00034514311118982732, 0.00032700554584152997, 0.0003744592540897429, 0.00020594010129570961, 0.00025166018167510629, 0.00024078474962152541, 0.00026403574156574905, 0.00021011933858972043, 0.00010525499237701297, 0.00026053065084852278, 0.00034611453884281218, 0.00033859000541269779, 0.00030421002884395421, 0.00031671562464907765, 0.00025881433975882828, 0.00011439337686169893, 0.00038277273415587842, 0.0002679965109564364, 0.00015701803204137832, 0.00014243662008084357, 0.00042684620711952448, 0.00031704097636975348, 0.00029310749960131943, 0.00025986848049797118, 9.6786992799025029e-05, 0.0001772473769960925, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = {
  /* [0][0][][] */ 45,-51,-36,42,99,54,-84,-121,3,57,119,-60,-76,85,75,55,70,-70,68,76,-79,-84,46,76,-53,-18,82,94,107,78,-74,63,47,-65,-109,-85,68,-74,84,17,-83,54,27,-86,95,117,64,-55, 75,-71,-63,66,127,68,-94,-115,18,72,127,-79,-107,118,85,79,67,-86,88,85,-69,-103,74,114,-69,-55,99,115,113,127,-85,91,63,-116,-127,-109,98,-86,89,47,-105,68,30,-83,94,127,70,-82, 41,-33,-39,24,54,6,-27,-43,20,29,37,-31,-85,55,26,33,17,-19,48,14,-1,-63,38,53,-35,-12,24,57,53,68,-23,14,33,-56,-65,-69,29,-28,32,48,-41,51,19,-27,57,48,16,-45,
  /* [0][1][][] */ 37,-79,-75,85,107,85,-127,-127,85,96,85,-88,-78,98,127,81,116,-99,49,127,-127,-127,84,105,-113,-89,112,98,126,79,-89,95,98,-92,-110,-116,84,-107,106,76,-107,113,96,-127,82,112,55,-83, 52,-127,-127,127,122,127,-95,-106,127,127,126,-127,-127,127,115,127,127,-127,76,121,-123,-125,127,127,-127,-127,127,127,127,83,-127,127,127,-127,-99,-127,127,-127,127,127,-127,127,127,-127,127,114,62,-127, -5,-67,-78,70,59,28,-47,-49,74,51,41,-63,-74,46,46,62,41,-30,35,24,-23,-102,66,82,-79,-11,21,67,82,16,-33,28,62,-114,-70,-68,30,-37,38,74,-31,56,65,-77,48,8,19,-70,
  /* [0][2][][] */ -43,-54,-43,68,18,38,-69,-4,-117,66,41,-55,-49,47,72,62,69,-19,-86,48,-42,-30,40,48,-79,-64,65,52,34,13,-65,35,48,-48,-48,-42,37,-61,36,87,-30,69,67,-71,28,5,-103,-28, -127,-78,-74,99,38,65,-59,9,-92,73,75,-74,-101,51,66,79,78,-31,-127,51,-44,-65,67,60,-103,-41,49,64,33,22,-87,49,62,-111,-20,-67,61,-63,44,119,-18,95,105,-64,44,-12,-127,-79, -72,-23,-46,64,19,20,-5,-3,-107,43,39,-26,-36,29,30,37,22,-6,-74,21,-14,-14,25,43,-45,12,15,38,32,-6,-28,10,23,-38,-5,-35,17,-16,1,66,2,32,44,-11,4,-13,-54,-31,
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.011504508554935455, 0.0048008090816438198, 0.0046013901010155678, 0.0039349687285721302, 0.0023475235793739557, 0.0058930926024913788, 0.0048751225695014, 0.0036069138441234827, 0.0098705478012561798, 0.0024507371708750725, 0.0048974691890180111, 0.0047020385973155499, 0.0031926424708217382, 0.0075448849238455296, 0.0041102869436144829, 0.0029864455573260784, 0.0026741607580333948, 0.0061962348408997059, 0.014476170763373375, 0.003048646729439497, 0.0027521781157702208, 0.0034392941743135452, 0.0039223856292665005, 0.0053864847868680954, 0.0036906199529767036, 0.003997419960796833, 0.007895701564848423, 0.0065733152441680431, 0.0055318404920399189, 0.0075814430601894855, 0.0054346732795238495, 0.0034670790191739798, 0.0025557465851306915, 0.0041617164388298988, 0.0033563028555363417, 0.0034138064365833998, 0.0040846392512321472, 0.0037272276822477579, 0.003544302424415946, 0.0031274652574211359, 0.0052705621346831322, 0.010509295389056206, 0.0029543112032115459, 0.0036494596861302853, 0.0087321121245622635, 0.0056711267679929733, 0.010531186126172543, 0.0049351612105965614, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { -61, 25371, 26689, -2009, 168, -14222, 22352, 18282, -8783, 858, -1801, 16447, 20279, -17971, -10457, -2119, 329, 27725, -1052, 535, 39864, 10696, -9546, -8299, 16698, 12031, -2476, -2196, -4203, -437, 33279, 934, -3899, 9151, 14188, 16525, -3704, 44485, -3341, -782, 25983, -496, -1996, 14098, -450, -828, -6537, 13266, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00027069431962445378, 0.00011296021693851799, 0.0001082680028048344, 9.2587499239016324e-05, 5.5235850595636293e-05, 0.00013866100925952196, 0.00011470876779640093, 8.4868559497408569e-05, 0.00023224818869493902, 5.7664405176183209e-05, 0.00011523457214934751, 0.00011063620331697166, 7.5121002737432718e-05, 0.000177526701008901, 9.6712632512208074e-05, 7.026930688880384e-05, 6.2921433709561825e-05, 0.00014579376147594303, 0.00034061577753163874, 7.1732865762896836e-05, 6.4757135987747461e-05, 8.0924568464979529e-05, 9.2291425971779972e-05, 0.00012674082245212048, 8.6838117567822337e-05, 9.4056944362819195e-05, 0.00018578121671453118, 0.00015466623881366104, 0.00013016095908824354, 0.00017838689382188022, 0.00012787466403096914, 8.1578335084486753e-05, 6.0135214880574495e-05, 9.7922740678768605e-05, 7.8971832408569753e-05, 8.0324862210545689e-05, 9.6109157311730087e-05, 8.7699474534019828e-05, 8.3395352703519166e-05, 7.3587420047260821e-05, 0.00012401322601363063, 0.00024727755226194859, 6.9513203925453126e-05, 8.5869643953628838e-05, 0.00020546145970001817, 0.00013343828322831541, 0.00024779263185337186, 0.00011612144589889795, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[8*1*1*48] = {
  /* [0][0][][] */ -22,-30,42,-55,49,73,61,87,94,-47,-23,53,-33,-27,5,-21,36,41,7,-55,-28,14,-82,-43,29,-14,16,-76,-40,20,38,25,28,39,59,6,105,-44,-72,9,-56,-71,-31,-7,-69,-85,-127,52,
  /* [1][0][][] */ -13,-4,-43,53,2,8,-41,-18,-61,29,19,91,-25,6,-23,127,40,56,13,-33,-45,-21,-73,20,20,-7,-16,-87,51,-8,-61,-72,59,-30,-29,-55,36,34,52,-45,5,72,44,-41,2,-37,-54,-22,
  /* [2][0][][] */ 4,-66,-29,-7,-36,16,6,13,110,9,-15,-16,-33,-81,30,2,-5,-61,-24,-10,-100,46,9,30,10,45,-43,-28,-32,-41,43,-44,-94,29,-48,50,-78,69,-18,-19,127,-28,-8,42,25,41,-60,-41,
  /* [3][0][][] */ -35,-108,92,57,21,-96,-19,-15,-127,115,47,-50,45,8,-20,21,56,33,-28,43,70,76,28,-62,11,78,58,28,-36,-68,16,16,-18,2,50,8,-12,-87,-39,34,-30,-15,21,-67,-75,12,-9,25,
  /* [4][0][][] */ -14,53,-16,75,34,5,8,-6,-55,82,46,68,1,23,58,12,7,-99,-8,-15,87,-14,-93,58,72,-26,31,30,54,21,-10,-52,-51,127,7,14,62,-28,16,25,-31,41,-4,-26,-1,-54,-33,21,
  /* [5][0][][] */ -21,3,-6,-61,-127,32,119,32,19,64,-22,-29,-100,1,64,-28,-77,38,-58,-77,-2,108,3,38,99,30,-4,19,-20,-11,122,-51,-13,101,76,92,-16,53,90,42,-20,-34,-20,37,-69,55,32,54,
  /* [6][0][][] */ 6,-20,-10,29,-56,-56,19,7,28,-12,47,8,-50,-22,41,61,6,-62,9,-57,71,-21,0,-28,11,1,13,43,46,6,10,127,41,-12,-13,29,1,-7,24,16,4,41,-28,-48,-4,-20,-18,41,
  /* [7][0][][] */ -24,-16,-44,-4,3,-27,5,8,39,4,24,0,-5,13,0,0,25,-9,2,-1,-56,11,8,-25,3,-3,-53,-10,-11,-18,14,26,14,-8,31,8,-19,127,-11,-40,-40,1,-46,-30,22,63,-68,-10,
};
const TfArray<4, int> tensor_dimension24 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant24_scale = { 8, { 0.0044697066769003868, 0.005307760089635849, 0.0042838971130549908, 0.004515273030847311, 0.0051468564197421074, 0.0045748203992843628, 0.007740451954305172, 0.0086214905604720116, } };
const TfArray<8, int> quant24_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[8] = { 5741, -1989, 14630, -5384, -12014, -15228, -9750, -2145, };
const TfArray<1, int> tensor_dimension25 = { 1, { 8 } };
const TfArray<8, float> quant25_scale = { 8, { 0.00010516957263462245, 0.00012488848005887121, 0.00010079758067149669, 0.00010624172136886045, 0.00012110250827390701, 0.00010764283797470853, 0.00018212827853858471, 0.00020285860227886587, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = {
  /* [0][0][][] */ -77,-127,-39,29,-38,-14,53,-53,
  /* [1][0][][] */ -16,127,40,-85,13,-80,-63,87,
  /* [2][0][][] */ -127,-64,38,7,74,10,28,-22,
  /* [3][0][][] */ -3,-34,-127,-49,35,-44,-22,45,
  /* [4][0][][] */ -72,-95,122,-22,127,-74,57,14,
  /* [5][0][][] */ -15,63,42,-89,90,28,-61,127,
  /* [6][0][][] */ -127,87,61,60,-61,11,37,-112,
  /* [7][0][][] */ 47,-10,64,34,53,-127,-3,111,
  /* [8][0][][] */ 1,74,-5,-28,14,98,127,-70,
  /* [9][0][][] */ 85,127,14,-55,-73,-71,-40,98,
  /* [10][0][][] */ 34,-14,22,5,-27,38,-127,-67,
  /* [11][0][][] */ -85,2,-109,-66,127,20,32,72,
  /* [12][0][][] */ 105,45,-31,9,127,100,21,12,
  /* [13][0][][] */ -127,-118,-15,45,-85,50,62,-3,
  /* [14][0][][] */ -24,83,-99,102,-64,127,-26,31,
  /* [15][0][][] */ -5,-53,-17,-73,127,56,-22,57,
  /* [16][0][][] */ 68,-98,0,53,44,-16,43,-127,
  /* [17][0][][] */ -72,-65,-127,102,3,81,81,-116,
  /* [18][0][][] */ 62,-25,127,-4,-46,-99,-89,-21,
  /* [19][0][][] */ -35,127,25,40,113,-118,-64,-45,
  /* [20][0][][] */ -69,-9,-127,-47,31,-8,-7,0,
  /* [21][0][][] */ -122,-21,62,42,-83,-91,127,-46,
  /* [22][0][][] */ 46,-1,-127,-74,-37,-8,-14,69,
  /* [23][0][][] */ -15,48,127,-6,-105,17,5,-98,
  /* [24][0][][] */ -76,107,100,127,112,87,18,-62,
  /* [25][0][][] */ -38,-127,-94,53,-66,35,71,-12,
  /* [26][0][][] */ 119,118,-127,-57,-116,-2,-72,44,
  /* [27][0][][] */ 60,58,-75,25,-127,14,-36,-14,
  /* [28][0][][] */ -7,75,25,-50,58,65,-102,-127,
  /* [29][0][][] */ 44,-5,-3,-64,-127,6,16,-48,
  /* [30][0][][] */ -77,-2,34,127,43,21,-37,-16,
  /* [31][0][][] */ 21,-103,-13,-91,-127,44,-82,-104,
  /* [32][0][][] */ -127,-12,19,-13,9,-28,3,16,
  /* [33][0][][] */ 48,-54,-127,-95,-13,1,-46,24,
  /* [34][0][][] */ 59,86,127,-9,-114,-39,83,-72,
  /* [35][0][][] */ 83,17,18,-3,-99,-23,-127,-42,
  /* [36][0][][] */ 127,-3,91,-50,-3,-8,73,91,
  /* [37][0][][] */ 101,91,-11,-19,66,74,-127,39,
  /* [38][0][][] */ -29,84,108,127,-40,60,19,-69,
  /* [39][0][][] */ 40,41,127,-32,76,-47,-31,15,
  /* [40][0][][] */ 78,46,24,22,-64,-127,38,-47,
  /* [41][0][][] */ 29,-49,25,127,-20,74,-5,76,
  /* [42][0][][] */ -6,-113,90,-36,127,-42,119,12,
  /* [43][0][][] */ 14,-9,-114,-24,127,7,-92,109,
  /* [44][0][][] */ 100,-32,127,-15,-7,42,-55,17,
  /* [45][0][][] */ -17,38,13,-24,-60,-127,-23,67,
  /* [46][0][][] */ -59,96,69,33,14,-32,34,-127,
  /* [47][0][][] */ 30,-25,7,127,-13,-115,72,71,
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0049099856987595558, 0.0025302947033196688, 0.002416578121483326, 0.0035371447447687387, 0.0033289538696408272, 0.0019988457206636667, 0.0038366650696843863, 0.001905207522213459, 0.0015308435540646315, 0.0029162128921598196, 0.0044578448869287968, 0.0037015292327851057, 0.0035788998939096928, 0.0026835568714886904, 0.0048915580846369267, 0.0029013168532401323, 0.0033238467294722795, 0.0023784637451171875, 0.0021976793650537729, 0.0027838458772748709, 0.0043998099863529205, 0.0015974841080605984, 0.0046203155070543289, 0.002579420804977417, 0.0016214483184739947, 0.0018694872269406915, 0.0035587185993790627, 0.0017823890084400773, 0.0033949362114071846, 0.002621788764372468, 0.0074866609647870064, 0.0015717749483883381, 0.0051137241534888744, 0.0028793830424547195, 0.0020582443103194237, 0.0032516962382942438, 0.00065720081329345703, 0.0016404448542743921, 0.0029416866600513458, 0.0016370400553569198, 0.0025490468833595514, 0.006257006898522377, 0.0029356696177273989, 0.0024533993564546108, 0.0032106207218021154, 0.0042596147395670414, 0.0036355438642203808, 0.0023900980595499277, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[48] = { 628, 5550, -5622, 3048, 2915, 6197, 2107, 8546, 10919, 4732, -1339, -135, 1172, 4096, 1812, -858, -144, 5276, 7732, 283, 2083, 9721, 2280, 4877, 9739, 9008, 1279, 9637, 1739, 5888, -1149, 9994, 1149, 4614, 5918, 4062, 42471, 9838, 3727, 10928, 2509, 449, 4535, 2165, 3620, 1400, 2133, 2973, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 0.00027034740196540952, 0.00013931987632531673, 0.00013305855100043118, 0.00019475776934996247, 0.00018329462909605354, 0.00011005790292983875, 0.00021124957129359245, 0.00010490211570868269, 8.4289364167489111e-05, 0.00016056881577242166, 0.0002454521891195327, 0.00020380890055093914, 0.00019705684098880738, 0.00014775860472582281, 0.00026933275512419641, 0.00015974862617440522, 0.00018301342788618058, 0.00013095994654577225, 0.00012100582534912974, 0.00015328059089370072, 0.00024225674860645086, 8.7958636868279427e-05, 0.00025439794990234077, 0.00014202478632796556, 8.9278124505653977e-05, 0.00010293532977811992, 0.00019594564219005406, 9.8139636975247413e-05, 0.00018692766025196761, 0.00014435760385822505, 0.00041222100844606757, 8.6543077486567199e-05, 0.00028156538610346615, 0.0001585409336257726, 0.00011332843132549897, 0.00017904076958075166, 3.6185956560075283e-05, 9.032408706843853e-05, 0.00016197141667362303, 9.0136622020509094e-05, 0.00014035237836651504, 0.00034451537067070603, 0.0001616401132196188, 0.00013508595293387771, 0.00017677912546787411, 0.00023453749599866569, 0.00020017569477204233, 0.00013160053640604019, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*48] = {
  /* [0][0][][] */ -52,0,50,2,127,-65,24,9,-5,29,103,18,10,21,-89,-5,84,-35,-18,26,-53,6,-47,-7,-18,9,43,-57,-37,127,22,-72,-49,112,127,-120,9,-64,-127,-25,21,0,-22,-59,-4,-54,-126,23, -33,92,1,24,-27,-91,113,-19,63,11,71,127,20,127,-42,34,100,-69,11,34,-53,-29,103,-122,-2,54,-93,15,-37,-114,74,-127,-127,-85,27,-93,-59,-30,-101,21,-59,-5,9,-127,26,-127,42,53, -10,-3,15,-10,49,-67,12,-2,17,23,10,-32,-9,11,-76,10,56,-44,-14,20,-42,-2,-59,8,21,2,39,-111,-37,46,-54,-71,0,-3,112,-80,14,-37,-79,10,30,12,-10,-40,-15,-90,-127,-16,
  /* [0][1][][] */ -127,123,-9,-62,-11,-74,14,-5,42,16,79,97,87,93,-52,28,127,-122,15,108,-26,-64,-91,-17,-127,0,-21,5,-23,-7,127,-62,-88,127,-114,-56,36,-70,29,66,-107,37,-97,57,-8,-79,6,-45, 31,99,127,127,-63,83,-127,127,127,-127,-13,93,127,102,127,-95,-35,-80,127,16,-127,127,127,6,94,99,85,127,127,-95,121,-5,-88,-115,-25,-127,127,127,102,69,-75,127,-36,53,127,41,11,-124, -43,49,-26,-48,-88,-118,4,-22,10,3,83,92,32,101,-37,106,84,-127,-7,127,38,-89,-100,-20,25,-14,-15,19,-10,12,98,-50,-24,-34,-127,-60,25,-76,44,-127,-71,28,127,65,-24,-70,-14,127,
  /* [0][2][][] */ -2,-7,5,-9,25,-36,25,4,48,25,127,91,12,-5,-23,88,89,-52,-42,15,-15,-2,-44,61,-8,-10,-38,-30,10,54,25,26,-59,34,-66,86,-37,-49,38,-36,96,-14,-20,11,-26,6,7,-44, -39,127,13,25,-116,-127,73,-73,88,18,73,-59,-39,35,-33,127,98,15,-1,114,-69,16,78,127,23,-127,127,1,21,-64,-38,-69,-26,-66,-80,-57,-71,-46,28,40,127,37,-47,13,-32,-11,-77,-22, 49,-21,24,-1,-25,-46,6,11,51,23,66,63,28,-1,-27,48,44,-50,-50,29,-17,-10,-63,55,15,-24,-36,-65,13,-10,-5,28,-37,-1,-26,95,-27,-30,56,7,65,-8,35,7,-24,-31,17,13,
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0053761894814670086, 0.0040660547092556953, 0.04228166863322258, 0.010433024726808071, 0.0068701542913913727, 0.0053747352212667465, 0.0065438481979072094, 0.019287880510091782, 0.0048331795260310173, 0.017664223909378052, 0.0074926372617483139, 0.0034724143333733082, 0.0084259286522865295, 0.0038609718903899193, 0.0062570883892476559, 0.004916028119623661, 0.0035516205243766308, 0.002600307110697031, 0.01686379499733448, 0.0033427646849304438, 0.0044613741338253021, 0.016046596691012383, 0.008578963577747345, 0.0083286669105291367, 0.012964304536581039, 0.01212088018655777, 0.0098920557647943497, 0.012760435231029987, 0.012235014699399471, 0.0081825274974107742, 0.0065321605652570724, 0.0063328929245471954, 0.003540021600201726, 0.008565882220864296, 0.0074748573824763298, 0.0046491688117384911, 0.028815990313887596, 0.0077693699859082699, 0.0072923433035612106, 0.020469538867473602, 0.0074333553202450275, 0.007825581356883049, 0.0084404665976762772, 0.0089504150673747063, 0.0081912437453866005, 0.0037452473770827055, 0.0064525953494012356, 0.0092497942969202995, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[48] = { 8480, -15103, -1060, 2900, 2125, 12253, 3130, -1494, -8628, 1864, -3845, -5663, -6028, -11594, 4664, 146, -8372, 26266, -2839, -10473, 14605, 630, -446, -2444, -465, -341, -4330, 1842, 107, 3823, 57, 14900, 20488, -226, 4277, 14562, -1402, 13416, 680, -1063, -2903, -6600, 940, 2997, 3576, 19245, 10844, -3164, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00012263863754924387, 9.2752576165366918e-05, 0.00096450583077967167, 0.00023799233895260841, 0.00015671813162043691, 0.00012260545918252319, 0.00014927462325431406, 0.00043998437467962503, 0.00011025179992429912, 0.00040294643258675933, 0.00017091786139644682, 7.9210782132577151e-05, 0.00019220758986193687, 8.8074339146260172e-05, 0.00014273321721702814, 0.00011214169353479519, 8.101758430711925e-05, 5.9316756960470229e-05, 0.00038468750426545739, 7.6253287261351943e-05, 0.00010177038348047063, 0.00036604600609280169, 0.00019569853611756116, 0.00018998890300281346, 0.00029573449864983559, 0.00027649477124214172, 0.00022565206745639443, 0.00029108393937349319, 0.00027909834170714021, 0.00018665526295080781, 0.00014900800306349993, 0.00014446242130361497, 8.0753001384437084e-05, 0.00019540013454388827, 0.00017051228496711701, 0.0001060542490449734, 0.00065733428345993161, 0.00017723054043017328, 0.00016634886560495943, 0.00046693970216438174, 0.00016956555191427469, 0.00017851279699243605, 0.00019253921345807612, 0.00020417188352439553, 0.00018685408576857299, 8.5434498032554984e-05, 0.00014719301543664187, 0.000211001155548729, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[8*1*1*48] = {
  /* [0][0][][] */ 56,60,-86,62,12,34,-100,-38,7,-19,-14,-42,-24,-4,44,-1,52,-13,45,-27,24,-38,53,-6,15,-37,-13,15,-19,4,-30,-1,55,13,12,13,127,61,39,-30,-3,-25,0,-33,83,27,15,-56,
  /* [1][0][][] */ 67,27,13,4,24,90,-10,-26,32,71,-48,-77,103,-24,13,44,25,37,22,-87,127,-32,48,53,48,19,37,15,30,-54,47,83,62,102,5,111,62,30,24,34,80,12,29,26,26,43,96,-66,
  /* [2][0][][] */ -11,15,83,127,-45,29,-2,41,36,64,-1,-59,-36,97,27,33,-63,-90,62,-2,-7,50,-37,-87,-29,-43,29,-9,-99,32,-12,-8,-25,-41,-89,-37,7,24,-79,-18,-30,-55,-34,20,57,-67,-32,22,
  /* [3][0][][] */ -18,55,-72,-1,15,-65,10,57,100,-68,-51,8,-10,-20,5,54,23,11,-20,-19,-6,14,-63,38,-24,-38,40,-16,57,-25,32,-49,39,-30,-36,-50,-127,-4,-74,14,-28,-63,33,-15,-56,11,-18,-37,
  /* [4][0][][] */ 56,-18,27,-18,-66,66,20,60,-127,-56,51,39,66,-55,-71,-68,85,69,51,-31,10,-95,-14,37,-42,10,-41,-126,-63,-53,88,29,85,-5,110,85,65,53,53,26,20,43,-50,-28,83,66,103,-58,
  /* [5][0][][] */ 28,70,19,100,31,19,-44,-90,-95,28,-6,7,30,66,41,-62,73,98,-23,34,-21,-65,-26,-82,-101,-71,-44,61,3,49,-22,43,-7,-88,73,10,-34,127,-45,-111,-9,-35,-7,-31,-11,-9,-30,99,
  /* [6][0][][] */ 113,42,-13,127,-91,15,33,86,32,-99,92,99,102,-38,-25,-47,68,17,-72,18,90,-19,-45,5,16,82,-55,-42,20,-54,86,62,15,-26,11,109,117,-83,-10,15,-84,94,-108,82,62,126,113,-48,
  /* [7][0][][] */ 29,16,127,40,-37,67,-102,11,-35,112,-6,-14,58,58,9,-7,-54,-14,-67,14,-16,44,-7,-49,-4,39,56,-16,5,-7,20,-9,-84,-21,65,34,94,-10,45,-17,-28,-38,-29,-52,-1,-30,18,25,
};
const TfArray<4, int> tensor_dimension30 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant30_scale = { 8, { 0.0069757229648530483, 0.0030510721262544394, 0.003618746530264616, 0.0028862236067652702, 0.0035313202533870935, 0.0030537617858499289, 0.0030396345537155867, 0.0034735342487692833, } };
const TfArray<8, int> quant30_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[8] = { -11307, -34148, 2256, 7281, -14398, -176, -31516, -1108, };
const TfArray<1, int> tensor_dimension31 = { 1, { 8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.00016413466073572636, 7.1789931098464876e-05, 8.5146981291472912e-05, 6.7911147198174149e-05, 8.3089893450960517e-05, 7.1853217377793044e-05, 7.1520815254189074e-05, 8.1730220699682832e-05, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = {
  /* [0][0][][] */ -127,38,-20,-24,69,22,1,-42,
  /* [1][0][][] */ 4,-53,-39,-23,-42,-127,3,21,
  /* [2][0][][] */ -65,67,10,-55,-67,52,-79,127,
  /* [3][0][][] */ 60,38,51,-15,-51,-127,33,-27,
  /* [4][0][][] */ 7,54,-101,42,-127,80,37,33,
  /* [5][0][][] */ -23,45,41,-40,-98,-127,-74,-9,
  /* [6][0][][] */ -44,127,85,-29,-52,-37,26,-41,
  /* [7][0][][] */ -13,4,34,75,9,-127,4,48,
  /* [8][0][][] */ 127,23,-61,54,-64,-62,-111,-7,
  /* [9][0][][] */ 121,-39,-69,-80,2,-29,-43,127,
  /* [10][0][][] */ -114,-1,11,127,14,89,25,-98,
  /* [11][0][][] */ 30,24,50,-19,13,112,127,93,
  /* [12][0][][] */ -68,-112,-81,-113,127,-48,-32,58,
  /* [13][0][][] */ -33,-2,-17,54,5,-127,56,69,
  /* [14][0][][] */ 70,71,112,14,76,-127,-98,-38,
  /* [15][0][][] */ -47,55,127,56,-6,16,29,-54,
  /* [16][0][][] */ -74,-29,45,-63,127,4,-47,-6,
  /* [17][0][][] */ 43,-42,-58,3,-8,127,-24,42,
  /* [18][0][][] */ -19,127,62,-52,-43,38,86,-85,
  /* [19][0][][] */ 3,109,82,127,-13,25,43,17,
  /* [20][0][][] */ 13,12,75,-127,-70,-10,67,-18,
  /* [21][0][][] */ -78,78,38,-127,109,70,116,10,
  /* [22][0][][] */ 78,-36,-83,67,42,-45,-61,127,
  /* [23][0][][] */ 31,-85,-127,-46,66,-22,-68,113,
  /* [24][0][][] */ 40,-21,-90,13,-60,44,-111,127,
  /* [25][0][][] */ -20,-17,68,12,127,-12,-90,-35,
  /* [26][0][][] */ -2,119,127,-22,-32,-24,83,-73,
  /* [27][0][][] */ -46,42,127,-59,1,17,94,-110,
  /* [28][0][][] */ 77,-12,75,127,60,-39,34,101,
  /* [29][0][][] */ 67,60,84,25,-35,31,-127,81,
  /* [30][0][][] */ 55,5,-89,57,-127,-45,-42,49,
  /* [31][0][][] */ 16,127,107,-51,-93,52,110,-127,
  /* [32][0][][] */ 58,-11,2,26,104,127,34,-42,
  /* [33][0][][] */ 13,-30,-127,12,12,-23,-33,68,
  /* [34][0][][] */ 22,-50,16,-127,-3,70,-8,12,
  /* [35][0][][] */ -25,12,89,-9,11,-127,-4,-21,
  /* [36][0][][] */ -16,17,-34,-127,-16,11,22,-36,
  /* [37][0][][] */ 57,-10,-19,-90,-77,127,-54,-74,
  /* [38][0][][] */ 71,-57,-33,93,64,35,-20,127,
  /* [39][0][][] */ 127,76,31,78,-22,89,-56,-5,
  /* [40][0][][] */ 41,-104,-127,-23,29,4,-69,100,
  /* [41][0][][] */ -5,-52,-127,-96,-1,-73,-39,-23,
  /* [42][0][][] */ 56,118,72,127,-82,-28,31,36,
  /* [43][0][][] */ 127,-19,-90,-101,-75,-46,32,55,
  /* [44][0][][] */ 8,78,127,-93,-108,-3,62,-123,
  /* [45][0][][] */ 44,29,-127,55,-46,24,14,62,
  /* [46][0][][] */ 38,-45,-76,-127,28,-33,-34,55,
  /* [47][0][][] */ 83,-127,126,-73,82,-15,13,14,
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.00034135897294618189, 0.0025760687422007322, 0.0026325539220124483, 0.0031518603209406137, 0.0034533077850937843, 0.0029089422896504402, 0.0019682527054101229, 0.0025977457407861948, 0.0021385981235653162, 0.0017947083106264472, 0.0010862064082175493, 0.0024629565887153149, 0.0013856320874765515, 0.0029406563844531775, 0.0024428260512650013, 0.0032800913322716951, 0.0021888578776270151, 0.0034884742926806211, 0.0013262990396469831, 0.0030192958656698465, 0.0021554543636739254, 0.002101716585457325, 0.0026401979848742485, 0.0018835506634786725, 0.0028142533265054226, 0.0031729645561426878, 0.0026450178120285273, 0.0012290377635508776, 0.0042294482700526714, 0.0022567915730178356, 0.003063322976231575, 0.001211075228638947, 0.0034205871634185314, 0.0027773987967520952, 0.0022324237506836653, 0.0040505626238882542, 0.0038642003200948238, 0.0024946231860667467, 0.0035731599200516939, 0.0031946387607604265, 0.0010204906575381756, 0.0038010650314390659, 0.00120902294293046, 0.0026821342762559652, 0.0023674578405916691, 0.0029657033737748861, 0.0023411365691572428, 0.0023338000755757093, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[48] = { 50881, 4630, 1732, 1277, 3139, 2740, 6649, 3864, 3404, -6253, 14860, 1355, 8801, 2039, 4295, 1720, 5074, -678, 10876, 140, 4846, -763, 3263, 5360, 2348, -3129, 2496, 11536, 700, 5069, 1548, 11504, 546, 4207, -729, -1523, 2013, 2217, -39, 1677, 14740, -684, 11006, 2567, 1662, 3878, 3900, -2307, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 2.2293519577942789e-05, 0.00016823825717438012, 0.00017192719678860158, 0.00020584213780239224, 0.00022552910377271473, 0.00018997761071659625, 0.00012854291708208621, 0.00016965394024737179, 0.00013966785627417266, 0.00011720905604306608, 7.0938120188657194e-05, 0.00016085110837593675, 9.0493049356155097e-05, 0.00019204879936296493, 0.00015953641559462994, 0.00021421666315291077, 0.00014295022992882878, 0.00022782575979363173, 8.6618121713399887e-05, 0.00019718459225259721, 0.00014076870866119862, 0.00013725919416174293, 0.00017242641479242593, 0.00012301118113100529, 0.0001837936433730647, 0.00020722040790133178, 0.00017274118727073073, 8.0266167060472071e-05, 0.00027621738263405859, 0.00014738686149939895, 0.00020005991973448545, 7.9093071690294892e-05, 0.00022339218412525952, 0.00018138674204237759, 0.00014579543494619429, 0.00026453469763509929, 0.00025236373767256737, 0.00016291919746436179, 0.00023335641890298575, 0.00020863591635134071, 6.6646345658227801e-05, 0.00024824048159644008, 7.8959041275084019e-05, 0.0001751652016537264, 0.00015461425937246531, 0.00019368456560187042, 0.00015289527073036879, 0.00015241613436955959, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*48] = {
  /* [0][0][][] */ 84,79,-19,54,-4,6,-52,17,44,-58,37,17,10,-110,-25,43,106,44,-70,21,76,18,-19,-22,65,45,26,-1,-68,43,-12,-51,127,19,98,32,-35,12,127,39,-75,77,-102,-42,25,-88,-39,-7, 112,127,-64,84,6,67,-71,-127,57,32,127,39,-32,-7,-27,-4,-53,127,-77,46,67,127,46,-26,22,33,11,127,-127,100,-15,-127,2,-26,12,78,-68,127,99,30,-127,-71,96,6,6,40,-127,87, 57,55,6,40,4,1,-44,29,37,-72,35,17,1,-75,-33,-10,92,-14,-36,6,59,26,-23,41,47,75,13,-7,-9,10,-16,-29,123,12,85,23,-16,22,126,6,-46,75,63,77,34,115,18,-22,
  /* [0][1][][] */ -35,-50,-127,89,21,56,65,-34,38,43,-40,127,127,-28,-13,-75,-26,68,68,-10,-105,29,20,-100,22,72,14,8,-21,127,27,51,39,127,45,37,-94,-20,-43,110,76,2,84,-127,17,-112,-20,127, 40,-99,-53,-127,127,13,127,-85,-127,127,8,62,-101,127,127,-27,-127,75,17,127,41,6,127,-2,-127,127,32,-89,-78,19,-127,92,79,-97,42,124,127,56,-21,127,112,-69,-36,4,106,-63,-13,51, -20,-40,-106,56,-23,127,42,-24,37,30,-34,80,-17,-15,-30,-17,-66,77,127,-35,-127,32,-75,127,3,24,16,24,52,109,51,39,2,-4,-25,-127,-55,-43,4,53,42,71,-22,115,-4,125,-46,91,
  /* [0][2][][] */ -33,-16,6,14,-7,9,-13,10,31,-19,5,30,34,-84,-27,37,92,14,12,10,-65,14,-5,0,22,-9,-12,1,-8,23,52,8,11,16,127,-6,-20,87,85,48,21,72,116,-41,-48,-127,-26,-11, -127,-1,-88,28,-124,-11,-55,-18,28,112,-74,74,-21,-60,-10,127,-84,58,-86,-16,-65,26,11,-32,-20,50,-127,-31,-61,96,88,14,32,-22,30,26,-27,62,-67,67,-50,-127,-127,-29,-127,86,-123,103, -28,-15,12,18,13,3,-17,4,25,-45,-7,0,-5,-72,-24,10,91,-19,94,15,-70,-8,2,35,23,-27,-14,-15,12,16,50,11,26,18,86,36,-9,77,125,8,29,71,-61,48,-27,122,-25,-42,
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.011992438696324825, 0.0089265722781419754, 0.0048569557256996632, 0.0063174357637763023, 0.010045641101896763, 0.0058605223894119263, 0.015017429366707802, 0.0065820296294987202, 0.0074277226813137531, 0.020067587494850159, 0.016061916947364807, 0.0030303800012916327, 0.014595418237149715, 0.0043207230046391487, 0.0098027950152754784, 0.0093168579041957855, 0.0066917357034981251, 0.0062132645398378372, 0.0071986564435064793, 0.010652572847902775, 0.0044560418464243412, 0.0078683756291866302, 0.010572809725999832, 0.009998692199587822, 0.0080646928399801254, 0.01642177626490593, 0.011157169006764889, 0.019700111821293831, 0.0054448391310870647, 0.0052318903617560863, 0.009927261620759964, 0.011022527702152729, 0.0040414826944470406, 0.016034519299864769, 0.0043137911707162857, 0.0082492418587207794, 0.0066648116335272789, 0.0038923558313399553, 0.0037109809927642345, 0.0040799700655043125, 0.012551662512123585, 0.0051592821255326271, 0.011606610380113125, 0.0090368231758475304, 0.0079233096912503242, 0.003939459566026926, 0.0052471854723989964, 0.0074532222934067249, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[48] = { -2650, -1182, 9866, 560, -594, -6395, -590, 12279, 6055, -3278, -5394, -6353, -685, 16971, 6977, -752, 4871, -5676, 2700, -2989, 14776, -4029, -1399, -1119, 4196, -3847, 437, -1187, 7937, -24572, -4424, 237, -3009, -2510, -892, -1694, 10098, -4738, -94, -14755, -1324, 6986, -3920, -521, 2658, -5860, 11104, -3533, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00024685607058927417, 0.00018374732462689281, 9.9977078207302839e-05, 0.00013004004722461104, 0.00020678258442785591, 0.0001206348097184673, 0.00030912342481315136, 0.00013548653805628419, 0.00015289454313460737, 0.00041307741776108742, 0.00033062347210943699, 6.2378276197705418e-05, 0.00030043660080991685, 8.8939101260621101e-05, 0.00020178376871626824, 0.00019178108777850866, 0.00013774476246908307, 0.00012789576430805027, 0.00014817937335465103, 0.00021927585476078093, 9.1724541562143713e-05, 0.00016196507203858346, 0.00021763399126939476, 0.00020581617718562484, 0.00016600613889750093, 0.00033803092082962394, 0.00022966261894907802, 0.00040551318670623004, 0.00011207825446035713, 0.00010769485379569232, 0.00020434582256712019, 0.00022689111938234419, 8.3191131125204265e-05, 0.0003300594980828464, 8.8796412455849349e-05, 0.00016980494547169656, 0.00013719053822569549, 8.0121455539483577e-05, 7.6387979788705707e-05, 8.3983366494067013e-05, 0.00025836730492301285, 0.00010620026296237484, 0.00023891405726317316, 0.00018601676856633276, 0.00016309585771523416, 8.1091056927107275e-05, 0.00010800969175761566, 0.00015341943071689457, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[8*1*1*48] = {
  /* [0][0][][] */ 127,-18,23,-32,23,55,2,35,117,-92,52,7,-52,67,14,-56,17,-34,-20,-19,6,-59,9,-38,-56,-45,-37,-48,-27,97,-44,35,21,-51,11,-38,57,-63,-62,18,20,-31,-77,3,58,-25,51,-41,
  /* [1][0][][] */ 50,0,-7,55,50,53,18,30,63,-72,1,7,41,23,-34,-12,-33,-42,-67,-3,5,-46,50,75,-2,-67,-5,40,-26,55,-57,127,-23,43,-20,-21,-55,-17,-7,-17,-43,-16,-33,43,23,-2,8,-81,
  /* [2][0][][] */ -37,-15,-79,31,-68,-26,-20,44,-93,-75,-85,-31,-46,43,-127,-16,64,-71,36,-23,104,79,-20,-18,38,72,21,-97,-37,30,34,-1,-36,23,58,-72,55,-2,59,98,-46,81,33,-1,-72,63,-45,73,
  /* [3][0][][] */ -9,-15,-13,35,-20,6,-14,36,73,78,-127,-30,11,-22,-27,65,-50,-21,-1,44,-27,0,68,6,7,4,-42,43,-29,37,-50,-28,8,17,26,11,43,-5,34,13,-65,71,61,21,29,-9,-35,-39,
  /* [4][0][][] */ -33,-70,14,-44,1,99,-63,-73,6,-54,70,32,-67,-30,-23,20,65,11,-22,39,-79,-32,124,-25,-102,-25,-2,8,21,-16,-18,62,-59,40,-30,50,-37,40,-9,26,-44,34,-42,41,127,52,-19,4,
  /* [5][0][][] */ -63,-69,56,-127,-22,17,-32,-53,-9,73,-49,73,-75,23,53,14,73,58,66,18,29,2,-18,-60,45,-68,-1,-43,-15,-44,41,-75,-3,-37,59,-1,-19,28,40,57,95,17,21,-27,-13,-9,-25,30,
  /* [6][0][][] */ -55,-71,41,26,-55,-65,11,-61,-104,24,-117,46,28,-40,60,27,-31,27,10,127,-13,1,76,61,-73,-8,51,28,12,-49,-15,-62,-27,69,73,-82,-38,72,65,-39,-60,69,84,-61,-3,-46,-29,9,
  /* [7][0][][] */ 19,-5,14,-18,6,19,-41,-41,-127,-33,92,30,7,-23,33,3,18,44,0,-13,-43,15,-16,-44,40,1,-36,13,-10,-24,-28,-46,-91,-52,-30,9,52,-30,-22,4,52,1,50,-18,20,-39,41,16,
};
const TfArray<4, int> tensor_dimension36 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant36_scale = { 8, { 0.0085475994274020195, 0.0081683825701475143, 0.0042615104466676712, 0.00511129479855299, 0.0046126996167004108, 0.0059106587432324886, 0.0044086850248277187, 0.006289181299507618, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[8] = { -7863, -4326, 3013, -8288, 3765, -2966, 7392, 9906, };
const TfArray<1, int> tensor_dimension37 = { 1, { 8 } };
const TfArray<8, float> quant37_scale = { 8, { 0.00020111999765504152, 0.0001921972434502095, 0.00010027083772001788, 0.0001202657658723183, 0.00010853411367861554, 0.00013907432730775326, 0.00010373376426286995, 0.00014798073971178383, } };
const TfArray<8, int> quant37_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = {
  /* [0][0][][] */ -14,13,127,-16,-4,54,-1,-86,
  /* [1][0][][] */ 80,-58,67,-67,-24,-69,127,17,
  /* [2][0][][] */ 52,59,70,-74,-62,23,127,-29,
  /* [3][0][][] */ 2,25,7,-18,14,-66,127,4,
  /* [4][0][][] */ 127,-40,-41,-29,-102,-55,-31,66,
  /* [5][0][][] */ 36,69,127,-1,17,-37,20,-39,
  /* [6][0][][] */ 105,115,-24,127,-73,19,29,96,
  /* [7][0][][] */ -18,-6,9,41,23,-108,-127,-41,
  /* [8][0][][] */ 110,61,-38,79,-67,24,-127,-53,
  /* [9][0][][] */ 127,-24,-47,53,6,-49,30,-97,
  /* [10][0][][] */ 70,18,-13,7,-23,127,32,13,
  /* [11][0][][] */ 127,-25,3,-115,84,-60,-65,72,
  /* [12][0][][] */ -62,111,83,-34,16,67,-90,127,
  /* [13][0][][] */ 127,-3,-74,15,15,-67,22,-89,
  /* [14][0][][] */ 96,31,2,-14,-127,26,-64,-17,
  /* [15][0][][] */ 45,1,-125,-54,-122,-47,98,127,
  /* [16][0][][] */ -7,-47,113,-2,127,-51,-60,-33,
  /* [17][0][][] */ 31,-18,98,-10,127,-54,-80,-3,
  /* [18][0][][] */ 109,-39,127,57,-42,26,-38,-5,
  /* [19][0][][] */ 95,45,76,-76,-57,-127,12,-45,
  /* [20][0][][] */ 58,-40,71,127,2,-55,-87,79,
  /* [21][0][][] */ 84,-18,-61,-127,44,-55,5,102,
  /* [22][0][][] */ -67,-120,-75,-60,75,-62,127,-71,
  /* [23][0][][] */ -19,20,22,-43,-95,-127,9,-27,
  /* [24][0][][] */ 127,15,65,56,-11,-30,-92,70,
  /* [25][0][][] */ 72,45,-28,-87,-9,-4,-17,127,
  /* [26][0][][] */ -94,-24,27,-127,114,-11,-54,-97,
  /* [27][0][][] */ 116,127,-16,-65,14,68,31,11,
  /* [28][0][][] */ 43,127,14,18,-15,-49,-24,114,
  /* [29][0][][] */ 118,15,115,109,35,-20,-127,52,
  /* [30][0][][] */ 127,-98,-62,103,39,8,-76,82,
  /* [31][0][][] */ 98,-83,17,47,-78,-115,-127,62,
  /* [32][0][][] */ -103,-68,37,-127,91,-42,-51,-107,
  /* [33][0][][] */ 20,-1,25,20,28,-70,127,47,
  /* [34][0][][] */ -69,64,79,-94,127,-69,-61,100,
  /* [35][0][][] */ -68,9,11,98,7,127,36,-16,
  /* [36][0][][] */ 94,31,-33,-127,39,-10,24,48,
  /* [37][0][][] */ 36,37,-15,1,-63,127,63,45,
  /* [38][0][][] */ -28,-66,19,110,15,49,7,127,
  /* [39][0][][] */ 4,-2,-127,40,0,-41,-26,68,
  /* [40][0][][] */ 72,13,-87,7,-53,54,-62,127,
  /* [41][0][][] */ 46,-7,25,-49,-127,-122,-18,-6,
  /* [42][0][][] */ -74,60,-78,110,-20,88,-34,-127,
  /* [43][0][][] */ -15,6,-35,-127,-13,-1,-8,-73,
  /* [44][0][][] */ 81,33,36,82,15,127,-62,30,
  /* [45][0][][] */ 9,82,-21,23,127,-33,-83,-15,
  /* [46][0][][] */ 48,-92,-8,127,93,36,-42,100,
  /* [47][0][][] */ -10,-103,57,-16,127,28,43,28,
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.003073142608627677, 0.003132581477984786, 0.0021490782964974642, 0.0031843315809965134, 0.0020878731738775969, 0.0029335967265069485, 0.0019802751485258341, 0.0015353999333456159, 0.0017147682374343276, 0.0019229170866310596, 0.0030577199067920446, 0.0011000155936926603, 0.0020466395653784275, 0.0017897397046908736, 0.0018269072752445936, 0.0017369338311254978, 0.0027107805944979191, 0.0014131139032542706, 0.002722948556765914, 0.0018716024933382869, 0.0019115159520879388, 0.00054856232600286603, 0.00079726002877578139, 0.0031671281903982162, 0.0025135360192507505, 0.002159136813133955, 0.002952412236481905, 0.0026068096049129963, 0.0029023643583059311, 0.0020334082655608654, 0.001708748284727335, 0.00098539900500327349, 0.0028388320934027433, 0.0039972122758626938, 0.0013680445263162255, 0.0026509254239499569, 0.0013959043426439166, 0.0024832808412611485, 0.0033587808720767498, 0.0034353716764599085, 0.0019798323046416044, 0.0027818428352475166, 0.0010348840150982141, 0.0041132643818855286, 0.0035138153471052647, 0.0021301761735230684, 0.0025279917754232883, 0.0015862913569435477, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[48] = { 1242, -1220, 3789, 1967, 2773, 94, 1790, 5705, -2869, -2154, -1200, 8225, 3482, 3908, 5210, -3667, -2630, 8005, 2689, 4788, 4833, 23016, 13896, 832, -1858, 1337, -297, -1039, 1751, 2363, 4565, 10003, -542, 185, 7525, 2532, 7008, 2545, 1230, -1153, 3469, -1890, 10225, -305, 373, 2980, -2131, 5487, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00026771699776872993, 0.0002728950057644397, 0.0001872170832939446, 0.00027740321820601821, 0.00018188518879469484, 0.00025556044420227408, 0.00017251177632715553, 0.00013375644630286843, 0.00014938213280402124, 0.00016751502698753029, 0.00026637344853952527, 9.5827919722069055e-05, 0.00017829312128014863, 0.00015591327974107116, 0.00015915112453512847, 0.00015131308464333415, 0.00023614980455022305, 0.00012310349848121405, 0.00023720982426311821, 0.00016304475138895214, 0.00016652181511744857, 4.7788038500584662e-05, 6.9453351898118854e-05, 0.00027590454556047916, 0.00021896683028899133, 0.00018809332686942071, 0.00025719957193359733, 0.0002270923723699525, 0.00025283964350819588, 0.00017714047862682492, 0.00014885771088302135, 8.5843086708337069e-05, 0.00024730502627789974, 0.00034821737790480256, 0.00011917727533727884, 0.00023093551862984896, 0.00012160428741481155, 0.00021633115829899907, 0.0002926003944594413, 0.00029927259311079979, 0.00017247319919988513, 0.00024234039301518351, 9.0153982455376536e-05, 0.00035832726280204952, 0.00030610623070970178, 0.00018557041767053306, 0.0002202261530328542, 0.00013818986190017313, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*48] = {
  /* [0][0][][] */ 33,68,42,-87,-57,24,13,80,8,-17,-119,-79,-97,127,-40,69,43,101,41,15,-26,-93,-35,34,126,-89,-13,120,68,-66,86,15,-92,84,33,-61,-17,24,-91,-24,-86,-26,117,-74,91,-12,-69,107,
  /* [1][0][][] */ 83,1,86,38,39,-65,13,126,50,76,-91,74,-108,-100,37,-94,-57,-29,25,-20,112,93,-85,-66,63,-3,-45,-71,98,57,-16,-57,-98,-94,-91,-75,43,-60,-43,5,13,127,-2,23,54,5,-33,41,
  /* [2][0][][] */ 13,-31,-70,-63,-39,20,71,22,12,-43,-51,-29,62,90,-63,-99,-60,60,-45,40,-67,-25,62,34,-83,69,-5,-51,-11,-24,-58,42,84,-2,76,39,-55,29,-19,87,60,-34,127,85,-58,8,86,73,
  /* [3][0][][] */ -99,105,59,-98,105,110,75,72,103,11,47,-76,108,38,109,127,-123,73,-75,105,-90,77,-97,-4,107,82,-110,23,53,29,-60,112,-113,30,24,-113,-111,-53,-101,-63,-108,-60,-82,26,-96,-123,-44,-46,
  /* [4][0][][] */ -93,37,98,-7,74,3,-27,-45,19,70,-108,-59,-82,105,35,-98,74,44,-38,-78,-96,86,-115,-22,-44,-124,102,36,8,-122,127,38,-104,47,-60,-52,104,-8,-122,-105,117,110,-102,-105,-28,90,-52,-40,
  /* [5][0][][] */ -89,110,-38,-58,38,-19,-37,69,-1,-78,53,45,-76,40,120,103,-114,127,114,0,120,14,-49,117,-98,54,-50,-63,-21,47,74,7,-85,64,72,63,113,-54,-59,-51,88,10,-9,-64,118,120,15,-8,
  /* [6][0][][] */ 112,5,15,-83,-85,-21,57,-83,28,74,50,118,62,-58,-11,127,-53,96,44,90,-92,112,92,36,-51,58,-64,-86,-36,-77,14,55,-44,13,75,81,-87,-32,20,56,-67,48,79,25,-86,78,-80,-10,
  /* [7][0][][] */ 70,54,-58,-119,105,-28,-33,-70,18,-87,-1,-33,-51,107,95,82,66,-9,-51,49,66,-100,-17,-67,103,-60,52,121,-92,-39,-17,6,-127,-39,63,-42,115,-4,-3,-76,-105,27,-69,82,10,-70,-80,-59,
  /* [8][0][][] */ -71,-57,-124,-25,53,-9,-29,-112,86,-115,102,-110,-41,-110,-125,-9,12,62,72,-78,84,42,75,-68,-70,-103,-4,-97,-82,-88,-113,-18,-61,-20,-104,91,-127,-116,-67,-76,-32,22,22,-41,-20,-67,-30,74,
  /* [9][0][][] */ -41,-32,20,82,28,62,84,36,6,47,76,64,110,59,-38,-25,36,-63,-80,-89,-99,87,23,-30,-88,-67,-25,59,67,-127,-32,51,-78,-64,122,-33,-32,-8,-77,-58,110,89,0,12,40,69,42,-17,
  /* [10][0][][] */ -79,52,-62,-46,-30,82,-103,-70,62,-91,101,78,10,42,69,15,127,32,-74,42,6,-33,-7,88,29,110,1,-7,-82,-61,4,-81,83,71,122,-60,120,-56,69,124,88,27,49,74,-12,45,6,25,
  /* [11][0][][] */ 96,57,-58,-85,105,6,-28,-80,-68,66,38,-2,33,-64,67,-100,-106,85,-3,-38,-30,-33,73,-63,-74,102,49,85,19,62,11,54,33,84,-112,-68,19,127,-50,-87,61,-74,118,-125,103,36,-93,-21,
  /* [12][0][][] */ -76,-17,-82,127,13,-48,-64,-67,-52,-16,-12,60,-56,-90,-51,79,78,-22,15,115,-94,-19,82,48,-12,114,-12,21,106,-90,94,82,101,-20,22,-63,23,-83,96,86,96,79,58,-41,36,9,-42,121,
  /* [13][0][][] */ 63,14,88,-86,115,36,53,-59,54,-93,7,28,-14,97,51,44,77,55,19,97,127,-18,-18,-74,123,-97,-56,-96,39,-88,-51,-5,-75,-127,22,-13,68,-117,70,13,-15,-53,73,45,78,-15,71,49,
  /* [14][0][][] */ -32,-49,98,59,65,-80,24,-7,-1,71,-23,-59,10,113,-16,46,-95,-20,-9,-88,0,47,-41,-29,-38,-14,87,22,77,-74,83,-33,-16,92,122,33,37,83,-79,-92,113,127,121,35,84,-70,-3,-37,
  /* [15][0][][] */ 17,42,-7,-78,-95,85,8,44,-115,-47,106,-49,-21,-63,-49,-35,-37,81,-110,10,-36,-96,-68,-35,-8,-11,89,105,-23,-90,-127,19,46,93,-53,-34,-36,105,-42,-104,-61,111,101,-68,79,38,-100,-107,
  /* [16][0][][] */ -16,20,-107,117,78,-68,93,103,-50,34,78,-75,-55,80,-127,-34,53,77,-68,-34,-123,-28,-108,9,98,-73,-76,17,-55,90,104,28,-83,-45,16,8,-20,85,-120,63,39,25,74,-58,-106,-13,-108,-63,
  /* [17][0][][] */ -12,86,-106,-51,-19,42,-34,106,46,-21,89,-14,-32,107,43,-75,24,83,-15,75,25,-13,-61,-16,-87,16,-53,-73,-37,55,73,-96,49,-56,-32,40,41,-49,-26,34,-32,127,-27,-96,124,22,-74,-98,
  /* [18][0][][] */ 63,-123,-119,-28,57,4,-119,-102,-59,38,-101,-81,-10,85,18,29,5,77,-88,-47,-89,42,14,28,18,-21,21,-109,-29,-127,26,-116,-44,66,99,-70,23,-42,-67,-85,-100,18,101,-69,-31,29,82,-68,
  /* [19][0][][] */ 77,61,-94,77,118,83,-50,14,111,-26,0,-37,75,86,126,-50,36,-90,-20,123,-80,-75,32,127,88,-7,15,-29,86,52,119,-104,55,-29,-85,88,-101,-16,-63,10,75,54,55,42,-23,50,-99,103,
  /* [20][0][][] */ -16,-81,-29,62,95,18,78,39,-68,-81,27,-4,-36,-96,-8,-86,-25,-67,103,35,52,-126,94,-36,-119,118,-81,26,-2,-90,-57,-1,48,105,80,-71,105,13,-118,32,100,-127,-101,-17,40,12,-41,-50,
  /* [21][0][][] */ 70,94,118,-10,-24,-12,-24,-7,-17,108,27,-65,-39,-35,-74,-46,-27,0,-66,-65,0,72,127,-6,75,40,77,0,-26,-80,105,24,-73,97,108,124,-77,-57,-61,56,14,47,-5,20,-70,109,-91,82,
  /* [22][0][][] */ 2,-43,68,8,-84,-68,80,74,11,-28,-7,32,-20,38,-28,-90,-55,23,-77,70,56,115,25,78,-114,25,3,38,-26,-55,-45,-52,-10,127,66,82,40,-69,-4,-33,-28,-21,-36,30,58,-8,105,-8,
  /* [23][0][][] */ -32,-6,18,-42,-84,18,75,20,41,-87,51,-102,-110,96,79,-56,36,49,67,33,62,107,65,2,75,-52,-98,-68,-94,93,3,127,57,-74,110,-19,1,118,80,-95,127,62,108,-114,-85,1,-91,106,
  /* [24][0][][] */ 5,85,120,100,75,-11,-91,113,16,-79,-84,95,30,10,5,-65,-18,48,-43,95,127,-16,-17,43,-5,69,-82,-56,96,127,107,-15,98,-49,-7,-17,24,-34,-77,-93,15,124,-71,39,-30,79,59,-62,
  /* [25][0][][] */ -18,1,-12,89,-10,22,-98,48,-48,36,57,49,-88,68,77,-99,-2,-9,-100,3,63,102,-24,93,-1,-86,5,-72,66,58,-102,60,-25,-43,100,119,-111,51,-92,127,-105,79,68,16,-28,-68,-109,-90,
  /* [26][0][][] */ 73,-87,-10,-8,81,-111,101,-46,40,-40,-97,-1,-48,-76,31,-27,108,6,-91,-87,44,-60,69,89,-12,-41,62,46,19,-13,-57,-49,-12,54,43,117,-6,90,-127,118,95,-3,-36,-107,-13,55,124,12,
  /* [27][0][][] */ 60,53,-121,123,-31,-31,4,-2,-101,94,-29,-6,-118,79,84,-47,39,-117,-12,-118,-26,59,89,-101,-107,82,-38,61,96,-62,71,-124,121,-89,39,112,117,59,-75,-39,38,57,-28,69,75,-88,127,-69,
  /* [28][0][][] */ -109,112,-40,77,24,107,-96,1,79,-52,-111,88,72,-68,34,-116,-69,84,55,107,113,83,13,-81,96,-66,54,116,-46,35,-13,50,-53,11,-34,-55,45,108,-37,110,-89,-10,0,54,127,116,-7,3,
  /* [29][0][][] */ 28,-28,41,7,-11,13,36,-106,-31,-18,-59,-73,77,-13,-65,-35,90,100,-51,107,40,-60,-85,-94,114,-45,-117,-36,-38,102,-48,37,-119,104,111,-3,-17,-85,29,-44,127,-46,-17,9,-58,65,-97,6,
  /* [30][0][][] */ -66,-98,-80,-60,71,96,61,10,-59,48,21,65,96,61,-93,-127,93,114,89,14,-4,-71,119,-68,34,59,-41,8,84,-33,15,51,-14,-39,26,29,-80,-29,81,-32,-4,-80,-65,-101,90,116,-31,-32,
  /* [31][0][][] */ 34,127,67,-38,-77,-13,91,-92,-98,-68,68,-71,-87,-95,86,29,-10,45,-41,22,-32,-48,95,-1,51,89,-23,-59,-27,72,51,61,96,41,55,103,44,109,-19,-77,-11,93,-101,44,16,100,41,-7,
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0022794294636696577, 0.0022609720472246408, 0.0024470016360282898, 0.0020692048128694296, 0.002133670262992382, 0.0022989755962044001, 0.0025249454192817211, 0.0022572348825633526, 0.0023397193290293217, 0.0020959002431482077, 0.0025630549062043428, 0.0022265440784394741, 0.0023519413080066442, 0.0022657942026853561, 0.0023222253657877445, 0.0023023991379886866, 0.0022821829188615084, 0.0022686696611344814, 0.0023542901035398245, 0.0022181649692356586, 0.0022061737254261971, 0.002647545887157321, 0.0030491705983877182, 0.0022240546531975269, 0.0023555688094347715, 0.0023722629994153976, 0.0021863686852157116, 0.0021732391323894262, 0.0022467141970992088, 0.0023106478620320559, 0.002353267977014184, 0.0021773590706288815, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 316, 417, 890, -591, 300, 346, 648, -370, -757, -184, 825, 424, 526, 55, 439, -345, -337, 262, -378, 354, -414, 917, 1288, 318, 325, 55, -306, -21, 309, 241, 311, -395, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 5.3633633797289804e-05, 5.3199342801235616e-05, 5.7576511608203873e-05, 4.8687172238714993e-05, 5.020400567445904e-05, 5.4093543440103531e-05, 5.9410482208477333e-05, 5.3111409215489402e-05, 5.5052219977369532e-05, 4.9315302021568641e-05, 6.0307174862828106e-05, 5.2389274060260504e-05, 5.5339794926112518e-05, 5.3312804084271193e-05, 5.4640597227262333e-05, 5.4174099204828963e-05, 5.36984225618653e-05, 5.3380463214125484e-05, 5.5395063100149855e-05, 5.2192117436788976e-05, 5.1909970352426171e-05, 6.2295199313666672e-05, 7.1745191235095263e-05, 5.2330698963487521e-05, 5.5425149184884503e-05, 5.5817952670622617e-05, 5.1443970733089373e-05, 5.1135040848748758e-05, 5.2863862947560847e-05, 5.4368185374187306e-05, 5.5371012422256172e-05, 5.1231978432042524e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = {
  /* [0][0][][] */ -64,-42,16,-50,72,3,118,10,36,-44,-40,-22,85,-20,106,-3,-70,-24,72,8,78,13,127,-24,-31,92,20,-53,-56,-71,1,27,
  /* [1][0][][] */ 92,127,-117,-65,19,101,13,-49,59,-95,-119,58,-77,8,33,70,-81,96,84,75,-63,-52,-49,53,103,-2,-74,-90,64,84,113,-100,
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0049258884973824024, 0.0036129492800682783, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 42385, -56078, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00011255605932092294, 8.2555532571859658e-05, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.06325145810842514, } };
const TfArray<1, int> quant46_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.077042177319526672, } };
const TfArray<1, int> quant47_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.06017729640007019, } };
const TfArray<1, int> quant51_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10113783925771713, } };
const TfArray<1, int> quant54_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.11077728122472763, } };
const TfArray<1, int> quant55_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.055060729384422302, } };
const TfArray<1, int> quant59_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022811442613601685, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.041440043598413467, } };
const TfArray<1, int> quant62_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.065308138728141785, } };
const TfArray<1, int> quant63_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020584309473633766, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0436396524310112, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.087115056812763214, } };
const TfArray<1, int> quant67_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.022849900647997856, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.079980537295341492, } };
const TfArray<1, int> quant70_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,8,9 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,10,11 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,12,13 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,14,15 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,16,17 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,20,21 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,22,23 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,24,25 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,26,27 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,28,29 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,30,31 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,32,33 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,34,35 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,36,37 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,38,39 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,40,41 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,42,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_fomo_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteStatus trained_model_fomo_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71,
};
TfLiteStatus trained_model_fomo_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_fomo_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_fomo_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
